[["index.html", "R Cheat Sheet Introduction About Setting up", " R Cheat Sheet Koen 2024-10-15 Introduction About This website is intended as a quick reference for some techiques that I think I may need when cleaning, analyzing, or presenting data. For a more basic intro to R try the R for Social Science Data Carpentry Workshop , on which some of this website is based. Setting up This book uses the SAFI data set, and a large number of libraries. The following will download them all. I use the here package to manage paths. #make sure your working folder is set to something sensible! file.create(&quot;.here&quot;) here::i_am(&quot;.here&quot;) library(here) dir.create(here(&quot;data&quot;)) download.file( &quot;https://raw.githubusercontent.com/datacarpentry/r-socialsci/main/episodes/data/SAFI_clean.csv&quot;, here(&quot;data/SAFI_clean.csv&quot;), mode = &quot;wb&quot; ) install.packages(c(&quot;tidyverse&quot;,&quot;here&quot;,&quot;arsenal&quot;,&quot;lmtest&quot;,&quot;sandwich&quot;,&quot;here&quot;, &quot;huxtable&quot;,&quot;flextable&quot;,&quot;declaredesign&quot;,&quot;fixest&quot;)) "],["datawrangling.html", "Data Wrangling Basic Data Manipulation Pivoting (or reshaping) Joining (or merging) data Summarizing over groups (or collapsing data) Row-wise Operations Splitting multi-response variable into dummies Renaming many variables", " Data Wrangling Make sure you have the tidyverse installed, and the SAFI data set downloaded to your data folder by running the code from the Set-up section Basic Data Manipulation library(tidyverse) library(here) read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% filter(village == &quot;Chirodzo&quot;) %&gt;% mutate(people_per_room = no_membrs / rooms, years_liv = if_else(years_liv &gt; 90, NA, years_liv), respondent_wall_type = as_factor(respondent_wall_type), respondent_wall_type = fct_recode(respondent_wall_type, &quot;Burned bricks&quot; = &quot;burntbricks&quot;, &quot;Mud Daub&quot; = &quot;muddaub&quot;, &quot;Sun bricks&quot; = &quot;sunbricks&quot;), conflict_yn = case_when(affect_conflicts == &quot;frequently&quot; ~ 1, affect_conflicts == &quot;more_once&quot; ~ 1, affect_conflicts == &quot;once&quot; ~ 1, affect_conflicts == &quot;never&quot; ~ 0, .default = NA), day = day(interview_date), month = month(interview_date), year = year(interview_date)) %&gt;% select(key_ID:rooms, day:people_per_room, -village) %&gt;% filter(interview_date &gt; &quot;2016-11-16&quot; &amp; interview_date &lt; &#39;2017-01-01&#39;) ## # A tibble: 10 × 9 ## key_ID interview_date no_membrs years_liv respondent_wall_type rooms ## &lt;dbl&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 10 2016-12-16 00:00:00 12 23 Burned bricks 5 ## 2 34 2016-11-17 00:00:00 8 18 Burned bricks 3 ## 3 35 2016-11-17 00:00:00 5 45 Mud Daub 1 ## 4 36 2016-11-17 00:00:00 6 23 Sun bricks 1 ## 5 37 2016-11-17 00:00:00 3 8 Burned bricks 1 ## 6 43 2016-11-17 00:00:00 7 29 Mud Daub 1 ## 7 44 2016-11-17 00:00:00 2 6 Mud Daub 1 ## 8 45 2016-11-17 00:00:00 9 7 Mud Daub 1 ## 9 46 2016-11-17 00:00:00 10 42 Burned bricks 2 ## 10 47 2016-11-17 00:00:00 2 2 Mud Daub 1 ## # ℹ 3 more variables: day &lt;int&gt;, conflict_yn &lt;dbl&gt;, people_per_room &lt;dbl&gt; Pivoting (or reshaping) In tidyverse, reshaping is called pivoting. Here’s how you pivot a household roster (reshape wider) so you can merge it with the household data. Creating fake data First, I create sa fake household roster, based on the SAFI data, making sure that the household roster has a number of lines for each household that is equal to the household size, and has two randomly generated variables: female and age. Note that age may be -99, which should be considered missing. long_data &lt;- read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% select(key_ID,no_membrs ) %&gt;% uncount(no_membrs) %&gt;% group_by(key_ID) %&gt;% mutate(member_ID = row_number()) %&gt;% rowwise() %&gt;% mutate(female = sample(0:1,1), age = case_when(member_ID == 1 ~ sample(18:86,1), .default = sample(c(0:86,-99),1))) %&gt;% ungroup() long_data ## # A tibble: 942 × 4 ## key_ID member_ID female age ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 1 1 49 ## 2 1 2 0 31 ## 3 1 3 0 28 ## 4 2 1 1 77 ## 5 2 2 1 80 ## 6 2 3 0 45 ## 7 2 4 0 54 ## 8 2 5 1 68 ## 9 2 6 0 68 ## 10 2 7 0 19 ## # ℹ 932 more rows Pivoting long to wide To merge this into our main data set, we need to make sure we go back to having 1 observation per household. We will do this by using pivot_wider(): wide_data &lt;- long_data %&gt;% pivot_wider(names_from = member_ID, values_from = !ends_with(&quot;_ID&quot;)) %&gt;% relocate(key_ID, ends_with(paste0(&quot;_&quot;,1:19))) wide_data ## # A tibble: 131 × 39 ## key_ID female_1 age_1 female_2 age_2 female_3 age_3 female_4 age_4 female_5 ## &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1 1 49 0 31 0 28 NA NA NA ## 2 2 1 77 1 80 0 45 0 54 1 ## 3 3 0 78 0 76 1 23 0 47 0 ## 4 4 1 29 0 71 1 84 1 55 0 ## 5 5 1 73 0 48 1 39 0 4 1 ## 6 6 0 37 0 75 1 7 NA NA NA ## 7 7 1 85 0 20 1 61 1 42 0 ## 8 8 0 31 0 16 1 23 1 45 1 ## 9 9 1 33 1 52 0 -99 1 27 0 ## 10 10 0 24 0 44 1 50 0 81 1 ## # ℹ 121 more rows ## # ℹ 29 more variables: age_5 &lt;dbl&gt;, female_6 &lt;int&gt;, age_6 &lt;dbl&gt;, ## # female_7 &lt;int&gt;, age_7 &lt;dbl&gt;, female_8 &lt;int&gt;, age_8 &lt;dbl&gt;, female_9 &lt;int&gt;, ## # age_9 &lt;dbl&gt;, female_10 &lt;int&gt;, age_10 &lt;dbl&gt;, female_11 &lt;int&gt;, age_11 &lt;dbl&gt;, ## # female_12 &lt;int&gt;, age_12 &lt;dbl&gt;, female_13 &lt;int&gt;, age_13 &lt;dbl&gt;, ## # female_14 &lt;int&gt;, age_14 &lt;dbl&gt;, female_15 &lt;int&gt;, age_15 &lt;dbl&gt;, ## # female_16 &lt;int&gt;, age_16 &lt;dbl&gt;, female_17 &lt;int&gt;, age_17 &lt;dbl&gt;, … We only needed to specify two options: names_from: this is the column that contains the names (or usually numbers) for each of our units of analysis. In this case, the member_ID. values_from: the variables containing the data. All variables you specify here, will get one column for each possible value of names_from. In our case, these variables female and age. I used tidy select syntax to specify all variables except the ones ending in _ID. I use relocate() to reorder the variables. Pivoting wide to long If we had started with wide data, and had wanted to transform to long data, we’d have to use pivot_longer(): wide_data %&gt;% pivot_longer(!key_ID, names_to = &quot;name&quot;, values_to = &quot;value&quot;) ## # A tibble: 4,978 × 3 ## key_ID name value ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 female_1 1 ## 2 1 age_1 49 ## 3 1 female_2 0 ## 4 1 age_2 31 ## 5 1 female_3 0 ## 6 1 age_3 28 ## 7 1 female_4 NA ## 8 1 age_4 NA ## 9 1 female_5 NA ## 10 1 age_5 NA ## # ℹ 4,968 more rows This was easy since the syntax of pivot_longer() is the exact opposite of pivot_wider(), but the result is pretty useless: The name column contains two things: a variable name and a member_ID; The data is too long: I’d like age and female to be two separate variables ; and There’s many empty rows: there’s and age and female row for 19 possible members for each household, but most households are smaller than that. I could use separate_wider_delim(), pivot_wider(), and filter(!is.na()) to address those, but that’s not elegant at all. I can do all of this within the pivot_longer() call by using the names_to and names_sep options: wide_data %&gt;% pivot_longer(!key_ID, names_to = c(&quot;.value&quot;, &quot;member_ID&quot;), names_sep=&quot;_&quot;, values_drop_na = TRUE, names_transform = list(member_ID = as.integer)) ## # A tibble: 942 × 4 ## key_ID member_ID female age ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 1 1 49 ## 2 1 2 0 31 ## 3 1 3 0 28 ## 4 2 1 1 77 ## 5 2 2 1 80 ## 6 2 3 0 45 ## 7 2 4 0 54 ## 8 2 5 1 68 ## 9 2 6 0 68 ## 10 2 7 0 19 ## # ℹ 932 more rows In this case, the syntax is a bit harder to understand. It’s good to think first what the original data looks like, and how I intend to transform it. The wide data has columns key_ID, age_1-19 and female_1-19. I don’t really want to touch the key_ID column. I want to turn the columns age_1-19 and female_1-19 into three columns: female, age and member_ID. This translates to the options we passed to pivot_longer() as follows: !key_ID: We want to pivot the data that’s in all columns except key_ID. names_to = c(\".value\", \"member_ID\"): this specifies the new columns we want to create. It basically says that the existing column names consist of two parts: one part (i.e. female and age) that we wish to keep as column names of variables that will contain my values, and one part (i.e. the numbers 1-19) which should be put into a new column which we will “member_ID”. names_sep=: this indicates how the two parts mentioned above are separated. In more difficult cases, you’ll have to use the names_pattern option. This requires some knowledge of regular expressions, so here’s two examples: If there is no seperator (age1,female1 etc…): names_pattern = \"(.*\\\\D)([0-9]+)$\". In this regular expression, .*\\\\D matches a string of any length, of any characters, as long as it ends with something other than a digit. The [0-9]+$ matches any number of digits at the end of the string. The parentheses indicate how the string should be separated to form variable names and member_ID. If the separator is used in other places in variable names (member_age_1 etc…): names_pattern = \"(.*)_([0-9]+)$\". values_drop_na = TRUE: tells R to drop rows that have missing data for all variables. This prevents the issue where we hadd too many rows. names_transform: by default, all name columns will be character types, but member_ID only contains integers, so we transform it to integer. This is completely optional. Joining (or merging) data Tidyverse has four functions to join (or merge, as Stata calls it) two data sets. The functions that differ in the way they treat observations that are in one data set but not the other. Consider the diagram below. It has two data sets, x (in Stata terms, this is the master data set) and y (the using data set in Stata terms). They have overlapping rows (area B), but also rows that are only in x (area A) or only in y (area C). The four join functions work as follows: inner_join(x,y) will only keep area B. left_join(x,y) will keep areas A and B. right_join(x,y) will keep areas B and C. full_join(x,y) will keep areas A, B, and C. In our case, the data sets match perfectly, i.e. we only have an area B, so there is no practical difference. I chose left_join() so the number of observations in my household survey is guaranteed to remain the same. To merge the roster to the household data, we use the join_by function: read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% left_join(wide_data) ## Rows: 131 Columns: 14 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (7): village, respondent_wall_type, memb_assoc, affect_conflicts, items... ## dbl (6): key_ID, no_membrs, years_liv, rooms, liv_count, no_meals ## dttm (1): interview_date ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## Joining with `by = join_by(key_ID)` ## # A tibble: 131 × 52 ## key_ID village interview_date no_membrs years_liv respondent_wall_type ## &lt;dbl&gt; &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 1 God 2016-11-17 00:00:00 3 4 muddaub ## 2 2 God 2016-11-17 00:00:00 7 9 muddaub ## 3 3 God 2016-11-17 00:00:00 10 15 burntbricks ## 4 4 God 2016-11-17 00:00:00 7 6 burntbricks ## 5 5 God 2016-11-17 00:00:00 7 40 burntbricks ## 6 6 God 2016-11-17 00:00:00 3 3 muddaub ## 7 7 God 2016-11-17 00:00:00 6 38 muddaub ## 8 8 Chirodzo 2016-11-16 00:00:00 12 70 burntbricks ## 9 9 Chirodzo 2016-11-16 00:00:00 8 6 burntbricks ## 10 10 Chirodzo 2016-12-16 00:00:00 12 23 burntbricks ## # ℹ 121 more rows ## # ℹ 46 more variables: rooms &lt;dbl&gt;, memb_assoc &lt;chr&gt;, affect_conflicts &lt;chr&gt;, ## # liv_count &lt;dbl&gt;, items_owned &lt;chr&gt;, no_meals &lt;dbl&gt;, months_lack_food &lt;chr&gt;, ## # instanceID &lt;chr&gt;, female_1 &lt;int&gt;, age_1 &lt;dbl&gt;, female_2 &lt;int&gt;, age_2 &lt;dbl&gt;, ## # female_3 &lt;int&gt;, age_3 &lt;dbl&gt;, female_4 &lt;int&gt;, age_4 &lt;dbl&gt;, female_5 &lt;int&gt;, ## # age_5 &lt;dbl&gt;, female_6 &lt;int&gt;, age_6 &lt;dbl&gt;, female_7 &lt;int&gt;, age_7 &lt;dbl&gt;, ## # female_8 &lt;int&gt;, age_8 &lt;dbl&gt;, female_9 &lt;int&gt;, age_9 &lt;dbl&gt;, … Note that we didn’t specify identifiers, like we would in Stata. R assumed that the variables that appear in both data frames are the identifiers, in this case key_ID. Use the by option to change this. Going the other way around, joining the household data to the roster data, is equally easy: long_data %&gt;% left_join( read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% select(key_ID,village,interview_date)) ## Rows: 131 Columns: 14 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (7): village, respondent_wall_type, memb_assoc, affect_conflicts, items... ## dbl (6): key_ID, no_membrs, years_liv, rooms, liv_count, no_meals ## dttm (1): interview_date ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## Joining with `by = join_by(key_ID)` ## # A tibble: 942 × 6 ## key_ID member_ID female age village interview_date ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dttm&gt; ## 1 1 1 1 49 God 2016-11-17 00:00:00 ## 2 1 2 0 31 God 2016-11-17 00:00:00 ## 3 1 3 0 28 God 2016-11-17 00:00:00 ## 4 2 1 1 77 God 2016-11-17 00:00:00 ## 5 2 2 1 80 God 2016-11-17 00:00:00 ## 6 2 3 0 45 God 2016-11-17 00:00:00 ## 7 2 4 0 54 God 2016-11-17 00:00:00 ## 8 2 5 1 68 God 2016-11-17 00:00:00 ## 9 2 6 0 68 God 2016-11-17 00:00:00 ## 10 2 7 0 19 God 2016-11-17 00:00:00 ## # ℹ 932 more rows Note that here I only merged in two variables, by using select and a pipe within the left_join() function. Summarizing over groups (or collapsing data) To compute summary statistics (sums, counts, means etc.) over a group, we use the group_by() and summarize() functions. For example, to compute the household size, number of women and average age in each household. But before doing anything, I make sure the -99s in the age variable are treated as missing, using a simple mutate() to conver them to NA. long_data %&gt;% group_by(key_ID) %&gt;% mutate(age = if_else(age == -99,NA,age)) %&gt;% summarize(hh_size = n(), num_women = sum(female), mean_age = mean(age, na.rm = TRUE)) ## # A tibble: 131 × 4 ## key_ID hh_size num_women mean_age ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 3 1 36 ## 2 2 7 3 58.7 ## 3 3 10 4 54.5 ## 4 4 7 3 48.1 ## 5 5 7 4 37.4 ## 6 6 3 1 39.7 ## 7 7 6 3 51.5 ## 8 8 12 8 45.8 ## 9 9 8 5 51.1 ## 10 10 12 4 37.7 ## # ℹ 121 more rows Row-wise Operations Suppose we wanted to run an operation over multiple variables. For example to get the household size, number of women and average age from our wide data. The easiest, and probably best, way to do this in R is by reshaping to long, and then use summarize, like we did above. But in Stata you would probably use some sort of egen function, so that may come natural. You can do similar things in R. It’s just a bit more complex than in Stata. across(): doing the same operations on multiple variables using across First, we need to make sure we update -99 to NA in all age_ variables. I use the across() function, which takes two arguments: a column specifcation (for which I use tidy select syntax), and a function: basically, the syntax is the same as in the mutate() step above, but with a tilde (~) in front of ifelse() and .x instead of the variable name. wide_data %&gt;% mutate(across(.cols = starts_with(&quot;age_&quot;), .fns = ~if_else(.x == -99,NA,.x))) ## # A tibble: 131 × 39 ## key_ID female_1 age_1 female_2 age_2 female_3 age_3 female_4 age_4 female_5 ## &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1 1 49 0 31 0 28 NA NA NA ## 2 2 1 77 1 80 0 45 0 54 1 ## 3 3 0 78 0 76 1 23 0 47 0 ## 4 4 1 29 0 71 1 84 1 55 0 ## 5 5 1 73 0 48 1 39 0 4 1 ## 6 6 0 37 0 75 1 7 NA NA NA ## 7 7 1 85 0 20 1 61 1 42 0 ## 8 8 0 31 0 16 1 23 1 45 1 ## 9 9 1 33 1 52 0 NA 1 27 0 ## 10 10 0 24 0 44 1 50 0 81 1 ## # ℹ 121 more rows ## # ℹ 29 more variables: age_5 &lt;dbl&gt;, female_6 &lt;int&gt;, age_6 &lt;dbl&gt;, ## # female_7 &lt;int&gt;, age_7 &lt;dbl&gt;, female_8 &lt;int&gt;, age_8 &lt;dbl&gt;, female_9 &lt;int&gt;, ## # age_9 &lt;dbl&gt;, female_10 &lt;int&gt;, age_10 &lt;dbl&gt;, female_11 &lt;int&gt;, age_11 &lt;dbl&gt;, ## # female_12 &lt;int&gt;, age_12 &lt;dbl&gt;, female_13 &lt;int&gt;, age_13 &lt;dbl&gt;, ## # female_14 &lt;int&gt;, age_14 &lt;dbl&gt;, female_15 &lt;int&gt;, age_15 &lt;dbl&gt;, ## # female_16 &lt;int&gt;, age_16 &lt;dbl&gt;, female_17 &lt;int&gt;, age_17 &lt;dbl&gt;, … Notes: You can use across(.cols = where(is.numeric), .fn = ...) to apply a function to all numeric variables. You can also combine across() with summarize() to summarize multiple variables more easily. See the section on faceting for an example. c_across(): passing values from multiple variables to summarizing functions Then I have to pass all the female_ and age_ variables to sum() and mean(): wide_data %&gt;% mutate(across(.cols = starts_with(&quot;age_&quot;), .fn = ~if_else(.x == -99,NA,.x))) %&gt;% rowwise() %&gt;% mutate(mean_age = mean(c_across(starts_with(&quot;age_&quot;)), na.rm=TRUE), num_women = sum(c_across(starts_with(&quot;female_&quot;)), na.rm=TRUE), hh_size = sum(!is.na(c_across(starts_with(&quot;female_&quot;))))) %&gt;% select(key_ID,hh_size,num_women, mean_age) %&gt;% ungroup() ## # A tibble: 131 × 4 ## key_ID hh_size num_women mean_age ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 3 1 36 ## 2 2 7 3 58.7 ## 3 3 10 4 54.5 ## 4 4 7 3 48.1 ## 5 5 7 4 37.4 ## 6 6 3 1 39.7 ## 7 7 6 3 51.5 ## 8 8 12 8 45.8 ## 9 9 8 5 51.1 ## 10 10 12 4 37.7 ## # ℹ 121 more rows The key trick here is the combination of rowwise() and c_across(). rowwise() ensures all summaries are computed per row, and c_across() allows you to use tidy select syntax within the mean() and sum() functions. Splitting multi-response variable into dummies The SAFI data contains a number of columns that contain all responses selected in a multiple response questions. For example, the variables items_owned can contain something like \"bicycle;television;solar_panel;table\". We want to split this into dummies: one for each possible answers. There’s a number of ways to do this, but the most convenient is using sepate_longer() read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% separate_longer_delim(items_owned, delim = &quot;;&quot;) %&gt;% mutate(value = 1) %&gt;% pivot_wider(names_from = items_owned, values_from = value, names_glue = &quot;owns_{items_owned}&quot;, values_fill = 0) %&gt;% left_join(read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% select(key_ID,items_owned)) %&gt;% select(items_owned, starts_with(&quot;owns_&quot;)) %&gt;% head() ## # A tibble: 6 × 19 ## items_owned owns_bicycle owns_television owns_solar_panel owns_table ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 bicycle;television;s… 1 1 1 1 ## 2 cow_cart;bicycle;rad… 1 0 1 1 ## 3 solar_torch 0 0 0 0 ## 4 bicycle;radio;cow_pl… 1 0 1 0 ## 5 motorcyle;radio;cow_… 0 0 0 0 ## 6 &lt;NA&gt; 0 0 0 0 ## # ℹ 14 more variables: owns_cow_cart &lt;dbl&gt;, owns_radio &lt;dbl&gt;, ## # owns_cow_plough &lt;dbl&gt;, owns_solar_torch &lt;dbl&gt;, owns_mobile_phone &lt;dbl&gt;, ## # owns_motorcyle &lt;dbl&gt;, owns_NA &lt;dbl&gt;, owns_fridge &lt;dbl&gt;, ## # owns_electricity &lt;dbl&gt;, owns_sofa_set &lt;dbl&gt;, owns_lorry &lt;dbl&gt;, ## # owns_sterio &lt;dbl&gt;, owns_computer &lt;dbl&gt;, owns_car &lt;dbl&gt; Note that the original items_owned variable is lost during the separate_longer_delim() step, so I used left_join() to merge it back in for demonstration purposes. Renaming many variables Let’s say we need to rename a bunch of variables. One way is to use a named list: # this follows the pattern new_name = old_name newnames &lt;- c(&quot;no_livestock&quot; = &quot;liv_count&quot;, &quot;no_rooms&quot; = &quot;rooms&quot;, &quot;affect_conflicts&quot; = &quot;ffect_conflicts&quot;) read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% rename(any_of(newnames)) %&gt;% glimpse() ## Rows: 131 ## Columns: 14 ## $ key_ID &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15… ## $ village &lt;chr&gt; &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, … ## $ interview_date &lt;dttm&gt; 2016-11-17, 2016-11-17, 2016-11-17, 2016-11-17, … ## $ no_membrs &lt;dbl&gt; 3, 7, 10, 7, 7, 3, 6, 12, 8, 12, 6, 7, 6, 10, 5, … ## $ years_liv &lt;dbl&gt; 4, 9, 15, 6, 40, 3, 38, 70, 6, 23, 20, 20, 8, 20,… ## $ respondent_wall_type &lt;chr&gt; &quot;muddaub&quot;, &quot;muddaub&quot;, &quot;burntbricks&quot;, &quot;burntbricks… ## $ no_rooms &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 3, 1, 5, 1, 3, 1, 3, 2, 1, 1… ## $ memb_assoc &lt;chr&gt; NA, &quot;yes&quot;, NA, NA, NA, NA, &quot;no&quot;, &quot;yes&quot;, &quot;no&quot;, &quot;no… ## $ affect_conflicts &lt;chr&gt; NA, &quot;once&quot;, NA, NA, NA, NA, &quot;never&quot;, &quot;never&quot;, &quot;ne… ## $ no_livestock &lt;dbl&gt; 1, 3, 1, 2, 4, 1, 1, 2, 3, 2, 2, 2, 3, 3, 3, 4, 1… ## $ items_owned &lt;chr&gt; &quot;bicycle;television;solar_panel;table&quot;, &quot;cow_cart… ## $ no_meals &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 3, 2, 3, 3, 2, 3, 2, 3, 2, 3, 2… ## $ months_lack_food &lt;chr&gt; &quot;Jan&quot;, &quot;Jan;Sept;Oct;Nov;Dec&quot;, &quot;Jan;Feb;Mar;Oct;N… ## $ instanceID &lt;chr&gt; &quot;uuid:ec241f2c-0609-46ed-b5e8-fe575f6cefef&quot;, &quot;uui… Note that \"affect_conflicts\" = \"ffect_conflicts\" didn’t do anything, as there is no ffect_conflicts variable. any_of() just ignored any variables not present in the data. This can be useful in data pipelines using multiple files, where some files have mistyped variable names. What if we want to do the same thing to many variables? For example, turning them all to uppercase? We could use newnames = c(KEY_ID = key_ID, VILLAGE = village) etc. etc., but that’d be extremely tedious. Instead, there is rename_with(), which takes two arugments: .fn: A function that takes the variable names of your dataset as an argument. .cols: a tidy select statement defining which columns to change. Defaults to all columns. This is what it’d look like: read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% rename_with(.fn = toupper) %&gt;% glimpse() ## Rows: 131 ## Columns: 14 ## $ KEY_ID &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15… ## $ VILLAGE &lt;chr&gt; &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, … ## $ INTERVIEW_DATE &lt;dttm&gt; 2016-11-17, 2016-11-17, 2016-11-17, 2016-11-17, … ## $ NO_MEMBRS &lt;dbl&gt; 3, 7, 10, 7, 7, 3, 6, 12, 8, 12, 6, 7, 6, 10, 5, … ## $ YEARS_LIV &lt;dbl&gt; 4, 9, 15, 6, 40, 3, 38, 70, 6, 23, 20, 20, 8, 20,… ## $ RESPONDENT_WALL_TYPE &lt;chr&gt; &quot;muddaub&quot;, &quot;muddaub&quot;, &quot;burntbricks&quot;, &quot;burntbricks… ## $ ROOMS &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 3, 1, 5, 1, 3, 1, 3, 2, 1, 1… ## $ MEMB_ASSOC &lt;chr&gt; NA, &quot;yes&quot;, NA, NA, NA, NA, &quot;no&quot;, &quot;yes&quot;, &quot;no&quot;, &quot;no… ## $ AFFECT_CONFLICTS &lt;chr&gt; NA, &quot;once&quot;, NA, NA, NA, NA, &quot;never&quot;, &quot;never&quot;, &quot;ne… ## $ LIV_COUNT &lt;dbl&gt; 1, 3, 1, 2, 4, 1, 1, 2, 3, 2, 2, 2, 3, 3, 3, 4, 1… ## $ ITEMS_OWNED &lt;chr&gt; &quot;bicycle;television;solar_panel;table&quot;, &quot;cow_cart… ## $ NO_MEALS &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 3, 2, 3, 3, 2, 3, 2, 3, 2, 3, 2… ## $ MONTHS_LACK_FOOD &lt;chr&gt; &quot;Jan&quot;, &quot;Jan;Sept;Oct;Nov;Dec&quot;, &quot;Jan;Feb;Mar;Oct;N… ## $ INSTANCEID &lt;chr&gt; &quot;uuid:ec241f2c-0609-46ed-b5e8-fe575f6cefef&quot;, &quot;uui… The variables names are used as the argument to toupper(), which returns them in upper case. But what if we need to provide more arguments? Let’s say we want to append _0 to all columns, except the ID columns, to indicate this is baseline data. We use paste0() which takes two arguments, the variable name and string we wish to append: read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% rename_with(.fn = ~paste0(.x, &quot;_0&quot;), .cols = !key_ID) %&gt;% glimpse() ## Rows: 131 ## Columns: 14 ## $ key_ID &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, … ## $ village_0 &lt;chr&gt; &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, &quot;God&quot;… ## $ interview_date_0 &lt;dttm&gt; 2016-11-17, 2016-11-17, 2016-11-17, 2016-11-17… ## $ no_membrs_0 &lt;dbl&gt; 3, 7, 10, 7, 7, 3, 6, 12, 8, 12, 6, 7, 6, 10, 5… ## $ years_liv_0 &lt;dbl&gt; 4, 9, 15, 6, 40, 3, 38, 70, 6, 23, 20, 20, 8, 2… ## $ respondent_wall_type_0 &lt;chr&gt; &quot;muddaub&quot;, &quot;muddaub&quot;, &quot;burntbricks&quot;, &quot;burntbric… ## $ rooms_0 &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 3, 1, 5, 1, 3, 1, 3, 2, 1,… ## $ memb_assoc_0 &lt;chr&gt; NA, &quot;yes&quot;, NA, NA, NA, NA, &quot;no&quot;, &quot;yes&quot;, &quot;no&quot;, &quot;… ## $ affect_conflicts_0 &lt;chr&gt; NA, &quot;once&quot;, NA, NA, NA, NA, &quot;never&quot;, &quot;never&quot;, &quot;… ## $ liv_count_0 &lt;dbl&gt; 1, 3, 1, 2, 4, 1, 1, 2, 3, 2, 2, 2, 3, 3, 3, 4,… ## $ items_owned_0 &lt;chr&gt; &quot;bicycle;television;solar_panel;table&quot;, &quot;cow_ca… ## $ no_meals_0 &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 3, 2, 3, 3, 2, 3, 2, 3, 2, 3,… ## $ months_lack_food_0 &lt;chr&gt; &quot;Jan&quot;, &quot;Jan;Sept;Oct;Nov;Dec&quot;, &quot;Jan;Feb;Mar;Oct… ## $ instanceID_0 &lt;chr&gt; &quot;uuid:ec241f2c-0609-46ed-b5e8-fe575f6cefef&quot;, &quot;u… In this case, we specify the function as a a purrr-style inline anonymous function (i.e. preceded by a ~), and we supply the variable names as .x. (This all works the same as across() above.) Now, let’s replace all instances of membrs or memb in variable names with members (so no_membrs becomes no_members, and memb_assoc becomes members_assoc. For this I will use gsub(), which takes three arguments: A pattern (expressed as a regular expression) to look for; a replacement for all matches of the pattern; and, the data to look in (in this case the varaible names). read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% rename_with(.fn = ~gsub(&quot;membrs|memb&quot;, &quot;members&quot;,.x)) %&gt;% glimpse() ## Rows: 131 ## Columns: 14 ## $ key_ID &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15… ## $ village &lt;chr&gt; &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, &quot;God&quot;, … ## $ interview_date &lt;dttm&gt; 2016-11-17, 2016-11-17, 2016-11-17, 2016-11-17, … ## $ no_members &lt;dbl&gt; 3, 7, 10, 7, 7, 3, 6, 12, 8, 12, 6, 7, 6, 10, 5, … ## $ years_liv &lt;dbl&gt; 4, 9, 15, 6, 40, 3, 38, 70, 6, 23, 20, 20, 8, 20,… ## $ respondent_wall_type &lt;chr&gt; &quot;muddaub&quot;, &quot;muddaub&quot;, &quot;burntbricks&quot;, &quot;burntbricks… ## $ rooms &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 3, 1, 5, 1, 3, 1, 3, 2, 1, 1… ## $ members_assoc &lt;chr&gt; NA, &quot;yes&quot;, NA, NA, NA, NA, &quot;no&quot;, &quot;yes&quot;, &quot;no&quot;, &quot;no… ## $ affect_conflicts &lt;chr&gt; NA, &quot;once&quot;, NA, NA, NA, NA, &quot;never&quot;, &quot;never&quot;, &quot;ne… ## $ liv_count &lt;dbl&gt; 1, 3, 1, 2, 4, 1, 1, 2, 3, 2, 2, 2, 3, 3, 3, 4, 1… ## $ items_owned &lt;chr&gt; &quot;bicycle;television;solar_panel;table&quot;, &quot;cow_cart… ## $ no_meals &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 3, 2, 3, 3, 2, 3, 2, 3, 2, 3, 2… ## $ months_lack_food &lt;chr&gt; &quot;Jan&quot;, &quot;Jan;Sept;Oct;Nov;Dec&quot;, &quot;Jan;Feb;Mar;Oct;N… ## $ instanceID &lt;chr&gt; &quot;uuid:ec241f2c-0609-46ed-b5e8-fe575f6cefef&quot;, &quot;uui… "],["reporting.html", "Estimating and reporting Generating some fake data Making a table of summary statistics Simple regression Robust standard errors", " Estimating and reporting This chapter uses a large number of packages, and the SAFI data set, so make sure all are downloaded by running the code from the Set-up section. I will create a table of descriptive statistics, and a simple regression table. Generating some fake data First we make a fake intervention aimed at improving fertilizer adoption. Adoption depends on the treatment and education and a random component. The page on DeclareDesign has more advanced techniques to generate fake data. library(tidyverse) library(here) library(modelsummary) library(flextable) library(estimatr) library(lmtest) library(clubSandwich) rm(list=ls()) set.seed(1) data &lt;- read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% left_join({.} %&gt;% select(village) %&gt;% distinct(village) %&gt;% rowwise %&gt;% mutate(treatment = rbinom(1,1,0.5)))%&gt;% rowwise() %&gt;% mutate(educated = rbinom(1,1,0.3), u = sample(c(0.1,0.2,0.3),1), prob = 0.3 * treatment + 0.1 * educated + u, uses_fertilizer = rbinom(1,1,prob)) %&gt;% ungroup() %&gt;% select(-prob,-u) Making a table of summary statistics Using modelsummary and flextable The modelsummary package is the most convenient to create tables. To convert them to word, I use the flextable package. For a simple table of descriptive statistics, use the datasummary() function. I also define a vector with variable labels, which I use throughout this chapter. Below, I use it in the labelizor() function, which applies labels to a flextable object. I also apply the autofit() and fix_border_issues() functions to make the table look nicer. library(modelsummary) library(flextable) # vector for labelling variable names labels = c(no_membrs = &quot;# HH Members&quot;, years_liv = &quot;Year in village&quot;, rooms = &quot;# Rooms&quot;, liv_count = &quot;# Livestock&quot;, no_meals = &quot;# Meals&quot;, treatment = &quot;Treated&quot;, educated = &quot;Educated&quot;, uses_fertilizer = &quot;Uses fertilizer&quot;, `(Intercept)` = &quot;Constant&quot;) # descriptive stats data %&gt;% select(where(is.numeric), -ends_with(&quot;ID&quot;)) %&gt;% datasummary(All(.) ~ Mean + SD + min + max + Histogram , data = ., output = &quot;flextable&quot;) %&gt;% labelizor(j =1,labels = labels, part = &quot;all&quot;)%&gt;% fix_border_issues() %&gt;% autofit() .cl-f309e742{}.cl-f3039f72{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-f3061a0e{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f3062f94{width:1.312in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3062f9e{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3062fa8{width:0.582in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3062fa9{width:0.981in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3062fb2{width:1.312in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3062fb3{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3062fbc{width:0.582in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3062fbd{width:0.981in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3062fbe{width:1.312in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3062fc6{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3062fc7{width:0.582in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3062fd0{width:0.981in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3062fd1{width:1.312in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3062fd2{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3062fda{width:0.582in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3062fdb{width:0.981in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} MeanSDminmaxHistogram# HH Members7.193.172.0019.00▂▅▇▂▃▂▁Year in village23.0516.911.0096.00▆▇▆▁▂▁# Rooms1.741.091.008.00▇▃▂# Livestock2.371.081.005.00▆▅▇▂# Meals2.600.492.003.00▅▇Treated0.370.490.001.00▇▄Educated0.300.460.001.00▇▃Uses fertilizer0.340.480.001.00▇▄ Flextables can be easily exported to Word using the save_as_docx() function. Balance Table Using modelsummary’s datasummary_balance() table function, it is easy to create a balance table: treat_labels &lt;- c(&quot;0&quot; = &quot;Control&quot;, &quot;1&quot; = &quot;Treated&quot;) # balance table data %&gt;% select(where(is.numeric), -ends_with(&quot;ID&quot;)) %&gt;% datasummary_balance( ~ treatment , data = ., output = &quot;flextable&quot;, stars = TRUE, dinm = TRUE, dinm_statistic = &quot;p.value&quot;) %&gt;% labelizor(j =1,labels = labels, part = &quot;all&quot;)%&gt;% labelizor(labels = treat_labels, part = &quot;header&quot;)%&gt;% fix_border_issues() %&gt;% autofit() .cl-f34a08c2{}.cl-f3442dee{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-f3467edc{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f34691f6{width:1.312in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f34691f7{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3469200{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3469201{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f346920a{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f346920b{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3469214{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3469215{width:1.312in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f346921e{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f346921f{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3469220{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3469221{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3469228{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3469229{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3469232{width:1.312in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3469233{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f346923c{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f346923d{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f346923e{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3469246{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3469247{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3469248{width:1.312in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3469250{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f346925a{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f346925b{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f346925c{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f346925d{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3469264{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} ControlTreated MeanStd. Dev.Mean Std. Dev. Diff. in Meansp# HH Members7.02.97.63.60.60.320Year in village21.914.924.919.83.00.366# Rooms1.71.21.71.00.00.961# Livestock2.21.02.61.20.30.107# Meals2.60.52.60.50.00.594Educated0.30.50.30.50.00.873Uses fertilizer0.20.40.50.50.3**0.003 Advanced: Using only Flextable For more control, the flextable package can covert data frames into good-looking table using the tabulator() function. First, make a data frame with summary statistics. I duplicate the data set using bind_rows() to create an overall group. Then I use summarize(across(...)) to apply summarizing functions to a number of variables. summstats &lt;- bind_rows(data %&gt;% mutate(Treatment = ifelse(treatment, &quot; Treatment&quot;, &quot; Control&quot;)), data %&gt;% mutate(Treatment = &quot;Overall&quot;)) %&gt;% select(where(is.numeric),Treatment,-key_ID,-treatment) %&gt;% group_by(Treatment) %&gt;% summarize(across(.cols = everything(), .fns = list(n = ~sum(!is.na(.x)), nmiss = ~sum(is.na(.x)), mean = ~mean(.x,na.rm=TRUE), sd = ~sd(.x,na.rm=TRUE), min = ~min(.x,na.rm=TRUE), max = ~max(.x,na.rm=TRUE), iqr = ~IQR(.x,na.rm=TRUE)), .names = &quot;{.col}-{.fn}&quot;)) %&gt;% pivot_longer(cols = -Treatment, names_to = c(&quot;Variable&quot;,&quot;.value&quot;), names_sep=&quot;-&quot;) summstats ## # A tibble: 21 × 9 ## Treatment Variable n nmiss mean sd min max iqr ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 &quot; Control&quot; no_membrs 82 0 6.96 2.86 2 15 3.75 ## 2 &quot; Control&quot; years_liv 82 0 21.9 14.9 1 70 13.8 ## 3 &quot; Control&quot; rooms 82 0 1.74 1.17 1 8 1 ## 4 &quot; Control&quot; liv_count 82 0 2.24 1.01 1 4 2 ## 5 &quot; Control&quot; no_meals 82 0 2.59 0.496 2 3 1 ## 6 &quot; Control&quot; educated 82 0 0.293 0.458 0 1 1 ## 7 &quot; Control&quot; uses_fertilizer 82 0 0.244 0.432 0 1 0 ## 8 &quot; Treatment&quot; no_membrs 49 0 7.57 3.64 2 19 5 ## 9 &quot; Treatment&quot; years_liv 49 0 24.9 19.8 2 96 22 ## 10 &quot; Treatment&quot; rooms 49 0 1.73 0.953 1 4 1 ## # ℹ 11 more rows Then use I flextable’s tabulator() to make output that looks good in word. Note that tabulator() sorts the columns alphabetically, so that would be control, overall, treatment. That doesn’t make sense, so I have used spaces (\" Treatment\") to control the ordering. I’ve added a bunch of statistics to show the flexibility: library(flextable) summstats %&gt;% tabulator(rows = &quot;Variable&quot;, columns = &quot;Treatment&quot;, `N` = as_paragraph(as_chunk(n,digits=0)), `Mean (SD)` = as_paragraph(as_chunk(fmt_avg_dev(mean, sd, digit1=2,digit2 = 2))), Range = as_paragraph(as_chunk(min), &quot;-&quot;,as_chunk(max)) ) %&gt;% as_flextable() .cl-f389de5c{}.cl-f3831c66{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-f386495e{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f3864968{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0;padding-top:0;padding-left:0;padding-right:0;line-height: 1;background-color:transparent;}.cl-f3864972{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f3864973{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0;padding-top:0;padding-left:0;padding-right:0;line-height: 1;background-color:transparent;}.cl-f386497c{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f386497d{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0;padding-top:0;padding-left:0;padding-right:0;line-height: 1;background-color:transparent;}.cl-f3864986{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f3865bf6{width:1.206in;background-color:transparent;vertical-align: bottom;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c00{width:0.079in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c01{width:0.434in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c0a{width:1.173in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c0b{width:0.824in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c0c{width:0.519in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c14{width:1.206in;background-color:transparent;vertical-align: bottom;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c15{width:0.079in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c16{width:0.434in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.75pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c1e{width:1.173in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.75pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c1f{width:0.824in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.75pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c20{width:0.519in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.75pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c28{width:1.206in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c29{width:0.079in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c2a{width:0.434in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c32{width:1.173in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c33{width:0.824in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c34{width:0.519in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c3c{width:1.206in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c3d{width:0.079in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c3e{width:0.434in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c3f{width:1.173in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c46{width:0.824in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3865c47{width:0.519in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Variable Control TreatmentOverallNMean (SD)RangeNMean (SD)RangeNMean (SD)Rangeeducated820.29 (0.46)0.0-1.0490.31 (0.47)0.0-1.01310.30 (0.46)0.0-1.0liv_count822.24 (1.01)1.0-4.0492.57 (1.17)1.0-5.01312.37 (1.08)1.0-5.0no_meals822.59 (0.50)2.0-3.0492.63 (0.49)2.0-3.01312.60 (0.49)2.0-3.0no_membrs826.96 (2.86)2.0-15.0497.57 (3.64)2.0-19.01317.19 (3.17)2.0-19.0rooms821.74 (1.17)1.0-8.0491.73 (0.95)1.0-4.01311.74 (1.09)1.0-8.0uses_fertilizer820.24 (0.43)0.0-1.0490.51 (0.51)0.0-1.01310.34 (0.48)0.0-1.0years_liv8221.94 (14.92)1.0-70.04924.92 (19.83)2.0-96.013123.05 (16.91)1.0-96.0 To add a column with differences, I first define a function to compute the differences (I use a regression rather than a ttest, so I can cluster my standard errors etc. to this if I need to). Then I use summarize(across(...)) in much the same way as above, now to create a dataframe called difcol. get_diffs &lt;- function(var,by){ reg &lt;- lm(var ~ by) %&gt;% broom::tidy() coeff = round(reg[2,2],2) p &lt;- reg[2,5] stars = case_when(p &lt; 0.001 ~ &quot;***&quot;, p &lt; 0.01 ~ &quot;**&quot;, p &lt; 0.05 ~ &quot;*&quot;, .default = &quot;&quot; ) paste0(coeff,stars) } difcol &lt;- data %&gt;% select(where(is.numeric),-key_ID,treatment) %&gt;% summarize(across(.cols = c(everything(), -treatment), .fns = ~get_diffs(var = .x, by = treatment))) %&gt;% pivot_longer(cols =everything(), names_to = &quot;Variable&quot;, values_to=&quot;Difference&quot;) Then, all I have to do is add it to tabulator() using its datasup_last argument. Below, I also use a few other flextable function to make the table nicer. In particular, labelizor() to add variable labels, for which I use the named vector I defined above. descriptive_table_flex &lt;- summstats %&gt;% tabulator(rows = &quot;Variable&quot;, columns = &quot;Treatment&quot;, datasup_last = difcol, `N` = as_paragraph(as_chunk(n,digits=0)), `Mean (SD)` = as_paragraph(as_chunk(fmt_avg_dev(mean, sd, digit1=2,digit2 = 2)))) %&gt;% as_flextable() %&gt;% labelizor(j = &quot;Variable&quot;, labels = labels, part = &quot;all&quot;) %&gt;% fix_border_issues() %&gt;% autofit() descriptive_table_flex .cl-f3ce853e{}.cl-f3c8c81a{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-f3cb0292{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f3cb029c{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0;padding-top:0;padding-left:0;padding-right:0;line-height: 1;background-color:transparent;}.cl-f3cb029d{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f3cb02a6{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0;padding-top:0;padding-left:0;padding-right:0;line-height: 1;background-color:transparent;}.cl-f3cb02a7{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f3cb02a8{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0;padding-top:0;padding-left:0;padding-right:0;line-height: 1;background-color:transparent;}.cl-f3cb02a9{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f3cb1480{width:1.312in;background-color:transparent;vertical-align: bottom;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb1494{width:0.1in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb1495{width:0.455in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb149e{width:1.194in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb14b2{width:0.54in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb14bc{width:0.981in;background-color:transparent;vertical-align: bottom;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb14c6{width:1.312in;background-color:transparent;vertical-align: bottom;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb14c7{width:0.1in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb14d0{width:0.455in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.75pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb14da{width:1.194in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.75pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb14e4{width:0.54in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.75pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb14e5{width:0.981in;background-color:transparent;vertical-align: bottom;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.75pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb14ee{width:1.312in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb14f8{width:0.1in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb14f9{width:0.455in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb1502{width:1.194in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb150c{width:0.54in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb150d{width:0.981in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb150e{width:1.312in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb1516{width:0.1in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb1517{width:0.455in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb1518{width:1.194in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb1520{width:0.54in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3cb1521{width:0.981in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Variable Control TreatmentOverallDifferenceNMean (SD)NMean (SD)NMean (SD)Educated820.29 (0.46)490.31 (0.47)1310.30 (0.46)0.01# Livestock822.24 (1.01)492.57 (1.17)1312.37 (1.08)0.33# Meals822.59 (0.50)492.63 (0.49)1312.60 (0.49)0.05# HH Members826.96 (2.86)497.57 (3.64)1317.19 (3.17)0.61# Rooms821.74 (1.17)491.73 (0.95)1311.74 (1.09)-0.01Uses fertilizer820.24 (0.43)490.51 (0.51)1310.34 (0.48)0.27**Year in village8221.94 (14.92)4924.92 (19.83)13123.05 (16.91)2.98 Again, to save it as a word file, use save_as_docx(path = \"my/file.docx\"). Simple regression A simple regression uses the lm() function. I use the modelsummary() function to display it: lm &lt;- lm(uses_fertilizer ~ treatment + educated, data = data) modelsummary(lm, output = &quot;flextable&quot;) .cl-f3fd4932{}.cl-f3f4faf2{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-f3f72250{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f3f7327c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3f73286{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3f73287{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f3f73290{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} (1)(Intercept)0.207(0.057)treatment0.265(0.083)educated0.128(0.088)Num.Obs.131R20.089R2 Adj.0.074AIC172.5BIC184.0Log.Lik.-82.241F6.230RMSE0.45 Robust standard errors To get robust standard errors clustered at the village level, using the same procedures Stata uses, I use lm_robust(): library(estimatr) lmrobust &lt;- lm_robust(uses_fertilizer ~ treatment + educated, data = data, clusters = village, se_type = &quot;CR2&quot;) modelsummary(list(&quot;LM&quot; = lm, &quot;Robust&quot; = lmrobust), output = &quot;flextable&quot;) .cl-f4333b50{}.cl-f42dd5b6{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-f43006ec{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f430177c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f4301786{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f4301790{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f4301791{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} LMRobust(Intercept)0.2070.207(0.057)(0.082)treatment0.2650.265(0.083)(0.105)educated0.1280.128(0.088)(0.101)Num.Obs.131131R20.0890.089R2 Adj.0.0740.074AIC172.5172.5BIC184.0184.0Log.Lik.-82.241F6.230RMSE0.450.45Std.Errorsby: village I’d like to have just the N, r-squared and Adjusted R-squared: modelsummary(list(&quot;LM&quot; = lm, &quot;Robust&quot; = lmrobust), gof_map = c(&quot;nobs&quot;,&quot;r.squared&quot;,&quot;adj.r.squared&quot;), output = &quot;flextable&quot;) .cl-f46622ea{}.cl-f460eb4a{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-f46313fc{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f46325d6{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f46325e0{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f46325e1{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f46325ea{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} LMRobust(Intercept)0.2070.207(0.057)(0.082)treatment0.2650.265(0.083)(0.105)educated0.1280.128(0.088)(0.101)Num.Obs.131131R20.0890.089R2 Adj.0.0740.074 If you want to add the number of clusters, you will need to do some work. modelsummary() gets the N etc. from the broom::glance() function. For lm_robust() models, this doesn’t report the number of clusters. However, you can make sure that it does, by making a custom glance methods for lm_robust objects (see here for details on how to make use custom glance methods in modelsumary): glance_custom.lm_robust &lt;- function(x) { # this function takes glance() output, and adds a nclusters column glance(x) %&gt;% mutate(nclusters = x$nclusters) } modelsummary(list(&quot;LM&quot; = lm, &quot;Robust&quot; = lmrobust), gof_map = c(&quot;nobs&quot;,&quot;r.squared&quot;,&quot;adj.r.squared&quot;, &quot;nclusters&quot;), output = &quot;flextable&quot;) .cl-f49b17d4{}.cl-f494721c{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-f496abfe{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f496bcb6{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f496bcb7{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f496bcc0{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f496bcc1{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} LMRobust(Intercept)0.2070.207(0.057)(0.082)treatment0.2650.265(0.083)(0.105)educated0.1280.128(0.088)(0.101)Num.Obs.131131R20.0890.089R2 Adj.0.0740.074Num.Clust.3 Now lets add a probit model! probit &lt;- glm(uses_fertilizer ~ treatment + educated, family = binomial(link = &quot;probit&quot;), data = data) modelsummary(list(&quot;LM&quot; = lm, &quot;Robust&quot; = lmrobust, &quot;Probit&quot; = probit), gof_map = c(&quot;nobs&quot;,&quot;r.squared&quot;,&quot;adj.r.squared&quot;, &quot;nclusters&quot;), output = &quot;flextable&quot;) .cl-f4db92dc{}.cl-f4d531f8{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-f4d7698c{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f4d77a1c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f4d77a1d{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f4d77a26{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f4d77a30{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} LMRobustProbit(Intercept)0.2070.207-0.813(0.057)(0.082)(0.173)treatment0.2650.2650.727(0.083)(0.105)(0.236)educated0.1280.1280.366(0.088)(0.101)(0.250)Num.Obs.131131131R20.0890.089R2 Adj.0.0740.074Num.Clust.3 Adding cluster-robust standard errors to the probit model is a bit more complex. There is no glm_robust() function. You can estimate a probit model, then use coeftest() to get clustered standard errors, and then use the glance_custom method to add the number of clusters to that. However, you can create your own glm_robust function, with blackjack and hookers including tidy() and glance() methods that return everything you want to modelsummary(). I use vcovCR from the clubSandwich package to compute CR2 standard errors, which are the default in estimatr, so everything is nice and consistent with the linear probability model. # this function estimates a probit model, and # then computes the cluster-robust standad errors using # clubSandwich and coeftest # it returns a glm_robust object, which is just a modified # coeftest object glm_robust &lt;- function(formula,family,data,cluster, type = &quot;CR2&quot;) { library(lmtest) library(clubSandwich) probit &lt;- glm(formula, family = family, data = data) model &lt;- probit%&gt;% coeftest(., vcovCR({.}, cluster = data[[cluster]], type = type), save = TRUE) # this computes the number of unique clusters in the data used # for the original mode attr(model,&quot;nclusters&quot;) &lt;- data[row.names(model.frame(probit)),cluster] %&gt;% unique() %&gt;% nrow() class(model) &lt;- &quot;glm_robust&quot; model } # this is the custom tidy methods for glm_robust objects # it returns a dataframe with coefficients tidy.glm_robust &lt;- function(x, ...){ x[,] %&gt;% as_tibble() %&gt;% mutate(term = attr(x,&quot;dimnames&quot;)[[1]]) %&gt;% select(term, estimate = Estimate, std.error = `Std. Error`, statistic = `z value`, p.value = `Pr(&gt;|z|)`) } # this is the glance method. It returns a data frame with # the number of obserations, log likelihood and number of clusters glance.glm_robust &lt;- function(x, ...){ tibble(nobs = attr(x,&quot;nobs&quot;), logLik = as.numeric(attr(x,&quot;logLik&quot;)), nclusters = attr(x,&quot;nclusters&quot;) ) } You can then simply use the glm_robust() function and modelsummary() will know how to handle its output! probitrobust &lt;- glm_robust(uses_fertilizer ~ treatment + educated, family = binomial(link = &quot;probit&quot;), data = data, cluster=&quot;village&quot;, type = &quot;CR2&quot;) modelsummary(list(&quot;LM&quot; = lm, &quot;LM Robust&quot; = lmrobust, &quot;Probit&quot; = probit, &quot;Probit Robust&quot; = probitrobust), gof_map = c(&quot;nobs&quot;,&quot;r.squared&quot;,&quot;adj.r.squared&quot;, &quot;nclusters&quot;), coef_map = labels, stars = TRUE, output = &quot;flextable&quot;) %&gt;% autofit() .cl-f531c3d2{}.cl-f52be160{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-f52e3abe{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f52e4c5c{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4c66{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4c70{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4c71{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4c7a{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4c7b{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4c84{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4c8e{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4c8f{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4c98{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4c99{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4c9a{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4ca2{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4ca3{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4cac{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4cad{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4cb6{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4cb7{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4cc0{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4cc1{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4cca{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4ccb{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4cd4{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4cde{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4cdf{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4ce0{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4ce8{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4ce9{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4cea{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4cf2{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4cfc{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4cfd{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4d06{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4d07{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4d10{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4d11{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4d12{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4d1a{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4d1b{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4d1c{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4d1d{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4d24{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4d25{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4d2e{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f52e4d2f{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} LMLM RobustProbitProbit RobustTreated0.265**0.265*0.727**0.727*(0.083)(0.105)(0.236)(0.331)Educated0.1280.1280.3660.366(0.088)(0.101)(0.250)(0.273)Constant0.207***0.207*-0.813***-0.813**(0.057)(0.082)(0.173)(0.279)Num.Obs.131131131131R20.0890.089R2 Adj.0.0740.074Num.Clust.33+ p &lt; 0.1, * p &lt; 0.05, ** p &lt; 0.01, *** p &lt; 0.001 "],["plotting.html", "Plotting using ggplot Introduction Data Prep Scatter plot Boxplot Bar chart Labels Faceting Stacked bar chart with WUR template and observation counts Ordering of labels Lollipop plot Maps", " Plotting using ggplot Introduction Each chart built with ggplot2 must include the following: - Data - Aesthetic mapping (aes) - Geometric objects (geom) Thus, the template for graphic in ggplot2 is: &lt;DATA&gt; %&gt;% ggplot(aes(&lt;MAPPINGS&gt;)) + &lt;GEOM_FUNCTION&gt;() Data Prep library(tidyverse) library(here) data &lt;- read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% separate_longer_delim(items_owned, delim = &quot;;&quot;) %&gt;% mutate(value = 1) %&gt;% pivot_wider(names_from = items_owned, values_from = value, names_glue = &quot;owns_{items_owned}&quot;, values_fill = 0) %&gt;% rowwise %&gt;% select(-&quot;owns_NA&quot;) %&gt;% mutate(number_items = sum(c_across(starts_with(&quot;owns_&quot;)))) Scatter plot A scatter plot uses geom_point() data %&gt;% ggplot(aes(x = no_membrs, y = number_items)) + geom_point() To differentiate overlapping points, you can use transparency… data %&gt;% ggplot(aes(x = no_membrs, y = number_items)) + geom_point(alpha = 0.3) …or add jitter: data %&gt;% ggplot(aes(x = no_membrs, y = number_items)) + geom_jitter() To add groups, add the variable that defines the groups as an aesthetic mapping, either in the call to ggplot(), or the one in the geom_() function you use: data %&gt;% ggplot(aes(x = no_membrs, y = number_items)) + geom_jitter(aes(color = village)) Boxplot data %&gt;% ggplot(aes(x = respondent_wall_type, y = rooms)) + geom_boxplot(alpha = 0) + geom_jitter(alpha = 0.3, color = &quot;tomato&quot;, width = 0.2, height = 0.2) Bar chart For a simple bar chart of counts: data %&gt;% ggplot(aes(x = respondent_wall_type)) + geom_bar(aes(fill = village)) And since stacked bar charts are not easy to read: data %&gt;% ggplot(aes(x = respondent_wall_type)) + geom_bar(aes(fill = village), position = &quot;dodge&quot;) Note that geom_bar() defaults to displaying counts. If you want something else, you can use the stat = option. stat = \"identity\" is especially useful, as it displays values as-is, allowing you to pre-process your data anyway you want, for example to get percentages: wall_plot &lt;- data %&gt;% filter(respondent_wall_type != &quot;cement&quot;) %&gt;% group_by(village, respondent_wall_type) %&gt;% summarize(n = n()) %&gt;% mutate(percent = (n / sum(n)) * 100) %&gt;% ungroup() %&gt;% ggplot(aes(x = village, y = percent, fill = respondent_wall_type)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) wall_plot Labels The labs() function changes labels, the scale_ family of functions change axes and legends: wall_plot + labs(title = &quot;Proportion of wall type by village&quot;, fill = &quot;Type of Wall in Home&quot;, x = &quot;Village&quot;, y = &quot;Percent&quot;) + scale_fill_discrete(labels=c(&#39;Burned briks&#39;, &#39;Mud Daub&#39;, &#39;Sun Bricks&#39;)) + scale_y_continuous(limits= c(0,100), n.breaks = 6) Faceting Faceting allows splitting a graph in multiple parts: data %&gt;% group_by(village) %&gt;% summarize(across(.cols = starts_with(&quot;owns_&quot;), .fns = ~sum(.x,na.rm=TRUE) / n() * 100, .names = &quot;{str_replace(.col, &#39;owns_&#39;, &#39;&#39;)}&quot;)) %&gt;% pivot_longer(-village, names_to = &quot;items&quot;, values_to = &quot;percent&quot;) %&gt;% ggplot(aes(x = village, y = percent)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) + facet_wrap(~ items) + theme_bw() + theme(panel.grid = element_blank()) Note that the .names argument to summarize(across()) is specified as a glue string that uses str_replace() to cut off the \"owns_\" bit of the column names. Stacked bar chart with WUR template and observation counts First, download the WUR template from here. Install it following the instruction on that page. Then we make a stacked bar chart using position = position_fill(). I use reverse = TRUE because I think the ordering doesn’t make sense in these horizontal plots. library(ggthemewur) data %&gt;% ggplot(aes(y = village, fill = respondent_wall_type)) + geom_bar(position = position_fill(reverse = TRUE)) + theme_wur() + scale_fill_wur_discrete() + scale_x_continuous(labels = scales::percent_format()) I like the percentages, but perhaps it’s good to know how many observations we have in each village. We can do this by changing the village names: data %&gt;% group_by(village) %&gt;% add_count() %&gt;% mutate(village = paste0(village,&quot; (n =&quot;,n,&quot;)&quot;)) %&gt;% ggplot(aes(y = village, fill = respondent_wall_type)) + geom_bar(position = position_fill(reverse = TRUE)) + theme_wur() + scale_fill_wur_discrete() + scale_x_continuous(labels = scales::percent_format()) You can also put the counts inside the plot: data %&gt;% ggplot(aes(y = village, fill = respondent_wall_type)) + geom_bar(position = position_fill(reverse = TRUE)) + theme_wur() + scale_fill_wur_discrete() + scale_x_continuous(labels = scales::percent_format()) + geom_text(stat = &quot;count&quot;, aes(label = after_stat(count)), position = position_fill(vjust = 0.5, reverse = TRUE), color = &quot;white&quot;) Or as percentages: data %&gt;% ggplot(aes(y = village, fill = respondent_wall_type)) + geom_bar(position = position_fill(reverse = TRUE)) + theme_wur() + scale_fill_wur_discrete() + scale_x_continuous(labels = scales::percent_format()) + geom_text(aes(label = after_stat(scales::percent(count / sum(count),accuracy=1))), stat = &quot;count&quot;, position = position_fill(vjust = 0.5, reverse = TRUE), color = &quot;white&quot;) Use functions to make all this code easier to use. Ordering of labels By default, ggplot will order categorical variables in your graph alphatically. With the wall types this was fine, but when the categories have an order, this doesn’t look good: data %&gt;% ggplot(aes(y = village, fill = affect_conflicts)) + geom_bar(position = position_fill(reverse = TRUE)) Here you’d expect the once category to be between more_once and never, not at the end. To fix this, convert the variable to a factor. The order in the levels argument will be the order in which the labels will be displayed: data %&gt;% mutate(affect_conflicts = factor(affect_conflicts, levels = c(&quot;frequently&quot;, &quot;more_once&quot;, &quot;once&quot;, &quot;never&quot;))) %&gt;% ggplot(aes(y = village, fill = affect_conflicts)) + geom_bar(position = position_fill(reverse = TRUE)) Note that the trick of adding group counts to string variables using add_count() doesn’t work with factors. Or rather, it works, but converts the factor back to a string. In the functions chapter, I define a function called count_label() that adds group counts to factor variables using black magic. Lollipop plot A lollipop plot is a nice alternative to a bar chart. Here is an example. It uses reorder to put the longest lollipops are at the top, and and the brewur() function to select four colors from the WUR theme. N = nrow(data) read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% separate_longer_delim(items_owned, delim = &quot;;&quot;) %&gt;% select(items_owned) %&gt;% filter(!is.na(items_owned)) %&gt;% group_by(items_owned) %&gt;% summarize(Count = n() / N) %&gt;% mutate(items_owned = reorder(items_owned, Count)) %&gt;% ggplot(aes(x = Count, y = items_owned)) + geom_linerange(aes(y = items_owned, xmin = 0, xmax = Count), color = &quot;gray&quot;) + geom_point(aes(x = Count, y = items_owned), size = 4, position = position_dodge(width = 0.5), color = brewur()[[1]]) + theme_wur() + scale_x_continuous(labels = scales::percent_format()) You can of course also group things, but this may mess up the ordering. Here I use complete to make sure that 0s ae properly displayed. The trick is to use position = position_dodge(width = 0.5). I use scale_color_manual() to set the colors to the first four WUR colors. read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% group_by(village) %&gt;% summarize(n = n()) ## # A tibble: 3 × 2 ## village n ## &lt;chr&gt; &lt;int&gt; ## 1 Chirodzo 39 ## 2 God 43 ## 3 Ruaca 49 read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% # get list of items, and summarize to counts by village separate_longer_delim(items_owned, delim = &quot;;&quot;) %&gt;% select(village, items_owned) %&gt;% filter(!is.na(items_owned)) %&gt;% group_by(village, items_owned) %&gt;% summarize(Count = n()) %&gt;% # make sure 0s are explicit ungroup() %&gt;% complete(village, items_owned, fill = list(Count = 0)) %&gt;% # merge in village totals left_join(read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% group_by(village) %&gt;% summarize(n = n())) %&gt;% # compute percentages mutate(Percent = Count / n) %&gt;% mutate(items_owned = reorder(items_owned, Percent)) %&gt;% # plot ggplot(aes(x = Percent, y = items_owned, group = village)) + geom_linerange(aes(y = items_owned, xmin = 0, xmax = Percent), position = position_dodge(width = 1), color = &quot;gray&quot;) + geom_point(aes(x = Percent, y = items_owned, color = village), size = 4, position = position_dodge(width = 1)) + scale_color_manual(values = brewur()[1:4]) + theme_wur() + scale_x_continuous(labels = scales::percent_format()) This graph is very crowded, so probably would need some changes. Perhaps facetting would have been better here, or you could manually tweak the y-values to create some whitespace. Maps For maps, we use the sf package, and a sample data set, in geo-json format (but sf can use all sorts of shapefiles). library(sf) file &lt;- &quot;https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json&quot; shapefile &lt;- st_read(file) ## Reading layer `countries.geo&#39; from data source ## `https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json&#39; ## using driver `GeoJSON&#39; ## Simple feature collection with 180 features and 2 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -180 ymin: -85.60904 xmax: 180 ymax: 83.64513 ## Geodetic CRS: WGS 84 shapefile ## Simple feature collection with 180 features and 2 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -180 ymin: -85.60904 xmax: 180 ymax: 83.64513 ## Geodetic CRS: WGS 84 ## First 10 features: ## id name geometry ## 1 AFG Afghanistan MULTIPOLYGON (((61.21082 35... ## 2 AGO Angola MULTIPOLYGON (((16.32653 -5... ## 3 ALB Albania MULTIPOLYGON (((20.59025 41... ## 4 ARE United Arab Emirates MULTIPOLYGON (((51.57952 24... ## 5 ARG Argentina MULTIPOLYGON (((-65.5 -55.2... ## 6 ARM Armenia MULTIPOLYGON (((43.58275 41... ## 7 ATA Antarctica MULTIPOLYGON (((-59.57209 -... ## 8 ATF French Southern and Antarctic Lands MULTIPOLYGON (((68.935 -48.... ## 9 AUS Australia MULTIPOLYGON (((145.398 -40... ## 10 AUT Austria MULTIPOLYGON (((16.97967 48... You can use ggplot() and geom_sf() to make a map: shapefile %&gt;% ggplot() + geom_sf() You can use the shapefile as a regular data file, using any old data wrangling functions on it. shapefile_updated &lt;- shapefile %&gt;% mutate(x = rnorm(n = nrow(.))) shapefile_updated ## Simple feature collection with 180 features and 3 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -180 ymin: -85.60904 xmax: 180 ymax: 83.64513 ## Geodetic CRS: WGS 84 ## First 10 features: ## id name geometry ## 1 AFG Afghanistan MULTIPOLYGON (((61.21082 35... ## 2 AGO Angola MULTIPOLYGON (((16.32653 -5... ## 3 ALB Albania MULTIPOLYGON (((20.59025 41... ## 4 ARE United Arab Emirates MULTIPOLYGON (((51.57952 24... ## 5 ARG Argentina MULTIPOLYGON (((-65.5 -55.2... ## 6 ARM Armenia MULTIPOLYGON (((43.58275 41... ## 7 ATA Antarctica MULTIPOLYGON (((-59.57209 -... ## 8 ATF French Southern and Antarctic Lands MULTIPOLYGON (((68.935 -48.... ## 9 AUS Australia MULTIPOLYGON (((145.398 -40... ## 10 AUT Austria MULTIPOLYGON (((16.97967 48... ## x ## 1 -0.97683035 ## 2 -0.10150345 ## 3 0.04265025 ## 4 -1.59671801 ## 5 0.49096737 ## 6 0.42160337 ## 7 1.87390390 ## 8 1.03451432 ## 9 0.08181031 ## 10 -0.08252376 You can use the fill aesthetic to color your shapefile: shapefile_updated %&gt;% ggplot(aes(fill = x)) + geom_sf(colour = NA) + # removes borders theme_void() # removes grid You can also make an interactive map, which you can use in html documents created with rmarkdown, or in shiny applications. It uses a palette I created using the colorBin() function. library(leaflet) pallete &lt;- colorBin( palette = &quot;YlOrBr&quot;, domain = shapefile_updated$x, na.color = &quot;transparent&quot;, bins = 5 ) shapefile %&gt;% mutate(x = rnorm(n = nrow(.))) %&gt;% leaflet() %&gt;% addTiles() %&gt;% addPolygons(fillColor = ~pallete(x), stroke = TRUE, fillOpacity = 0.9, color = &quot;white&quot;, weight = 0.3) %&gt;% addLegend(pal = pallete, values = ~x, opacity = 0.9, title = &quot;Look at these pretty colours&quot;, position = &quot;bottomleft&quot;) "],["declaredesign.html", "Power Analysis using DeclareDesign Simple Power Calculation Dif in diff Propsensity score matching", " Power Analysis using DeclareDesign DeclareDesign is a system to simulate Research Designs. This is useful for power analysis, because it is often hard to include things like clustering and covariates in standard power calculators. Resources for learning about DeclareDesign: Slides by the authors of DeclareDesign: Graeme Blair, Alex Coppock, Macartan Humphreys The DeclareDesign CheatSheet The book Research Design in the Social Sciences: Declaration, Diagnosis, and Redesign Read at least the slides before going forward! Simple Power Calculation Let’s first do some power calcuations. I will use Rhomis data from Burundi, you can get the data here. Loading data I do some data wrangling, like creating village codes based on y-coordinates, and some assorted cleaning. library(tidyverse) library(DeclareDesign) n_clusters = 18 rhomis &lt;- read_csv(&quot;data/RHoMIS_Indicators.csv&quot;) %&gt;% filter(Country == &quot;Burundi&quot;) %&gt;% # split the sample in villages, by lattitude filter(!is.na(GPS_LAT)) %&gt;% arrange(GPS_LAT) %&gt;% mutate(village = rep(1:n_clusters, each = nrow(.) / n_clusters , length.out = nrow(.))) %&gt;% select(village,HHsizeMAE,HouseholdType,Head_EducationLevel,LandOwned,HFIAS_status,NFertInput) %&gt;% # create some variables mutate(HFIAS_status = factor(HFIAS_status, levels = c(&quot;FoodSecure&quot;, &quot;MildlyFI&quot;, &quot;ModeratelyFI&quot;, &quot;SeverelyFI&quot;)), food_secure = 1 * (as.numeric(HFIAS_status) &lt;= 3), educated = 1*(Head_EducationLevel != &quot;No_school&quot;), female = 1* (HouseholdType == &quot;woman_single&quot;)) %&gt;% mutate(hh = row_number()) %&gt;% select(!HFIAS_status) %&gt;% # there are too many missings in my data; these seem reasonable to assume to be 0 when missing: mutate(across(c(LandOwned,NFertInput,educated), ~ if_else(is.na(.x),0,.x))) mean(rhomis$HFIAS_status == &quot;FoodSecure&quot;) ## [1] NaN Declare Design Now it’s time to start declaring our design. The first element of the design is the model, using declare_model() which essentially is my data. declare_model() follows the syntax of fabricate(), which allows you to generate an entirely new dataset. For now we stick with existing data, but the syntax is still the same as fabricate(), so insead of using mutate() we can just supply new variables after a comma. In this case, I add potential outcomes, using potential_outcomes(). effect_size_simple &lt;- 70 model_simple &lt;- declare_model( rhomis, potential_outcomes(Y ~ NFertInput + Z * effect_size_simple) ) The potential outcomes are generated using potential_outcomes(). This will create two variables Y_Z_1 and Y_Z_0, which are the potential outcomes if having received treatment (Z == 1) or not. Note that I will generate Z in the next step. Then it’s time to think about assignment. I do a clustered randomization, based on the villages: assignment_simple &lt;- declare_assignment(Z = cluster_ra(clusters = village, prob = 0.5)) Next, I declare my theoretical quantity of interest is the treatment effect in year 1. This is basically my research question. inquiry_simple &lt;- declare_inquiry(ATE = mean(Y_Z_1 - Y_Z_0)) measurement_simple &lt;- declare_measurement( Y = reveal_outcomes(Y~Z) ) Since I won’t be able to observe Y_Z_1 for the control group, nor Y_Z_0 for the treatment group, I will need an estimation strategy. A simple difference in means: estimator_simple &lt;- declare_estimator(Y ~ Z, clusters = village, inquiry = &quot;ATE&quot;, term = &quot;Z&quot;, label = &quot;Simple&quot;) Finally, I combine all these elements to declare my design. Note that it’s only here that R starts actually running the code to randomize things. The previous was just declaration! design_simple &lt;- model_simple + assignment_simple + inquiry_simple + measurement_simple + estimator_simple summary(design_simple) ## ## Research design declaration summary ## ## Step 1 (model): declare_model(rhomis, potential_outcomes(Y ~ NFertInput + Z * effect_size_simple)) ## ## N = 290 ## ## Added variable: village ## min median mean max sd N_missing N_unique ## 1 9 9.44 18 5.23 0 18 ## ## Added variable: HHsizeMAE ## min median mean max sd N_missing N_unique ## 0.6 4.36 4.46 9.29 1.77 0 171 ## ## Added variable: HouseholdType ## couple man_single polygamous woman_single ## 218 4 7 61 ## 0.75 0.01 0.02 0.21 ## ## Added variable: Head_EducationLevel ## N_missing N_unique class ## 70 6 character ## ## Added variable: LandOwned ## min median mean max sd N_missing N_unique ## 0 1 5.39 1000 58.8 0 63 ## ## Added variable: NFertInput ## min median mean max sd N_missing N_unique ## 0 16 72.71 7500 465.79 0 44 ## ## Added variable: food_secure ## 0 1 ## 160 130 ## 0.55 0.45 ## ## Added variable: educated ## 0 1 ## 106 184 ## 0.37 0.63 ## ## Added variable: female ## 0 1 ## 229 61 ## 0.79 0.21 ## ## Added variable: hh ## min median mean max sd N_missing N_unique ## 1 145.5 145.5 290 83.86 0 290 ## ## Added variable: ID ## N_missing N_unique class ## 0 290 character ## ## Added variable: Y_Z_0 ## min median mean max sd N_missing N_unique ## 0 16 72.71 7500 465.79 0 44 ## ## Added variable: Y_Z_1 ## min median mean max sd N_missing N_unique ## 70 86 142.71 7570 465.79 0 44 ## ## Step 2 (assignment): declare_assignment(Z = cluster_ra(clusters = village, prob = 0.5)) ## ## Added variable: Z ## 0 1 ## 144 146 ## 0.50 0.50 ## ## Step 3 (inquiry): declare_inquiry(ATE = mean(Y_Z_1 - Y_Z_0)) ------------------- ## ## A single draw of the inquiry: ## inquiry estimand ## ATE 70 ## ## Step 4 (measurement): declare_measurement(Y = reveal_outcomes(Y ~ Z)) ---------- ## ## Added variable: Y ## min median mean max sd N_missing N_unique ## 0 70 107.95 7570 469.47 0 62 ## ## Step 5 (estimator): declare_estimator(Y ~ Z, clusters = village, inquiry = &quot;ATE&quot;, term = &quot;Z&quot;, label = &quot;Simple&quot;) ## ## Formula: Y ~ Z ## ## A single draw of the estimator: ## term estimator estimate std.error statistic p.value conf.low conf.high ## Z Simple 132.8381 59.24667 2.242119 0.03948933 7.231944 258.4442 ## df outcome inquiry ## 15.98618 Y ATE Note that the results of my three estimators are identical, which is as expected. Diagnosing Design and calculating power If you want to browse a version of the data created by your design, use the draw_data() function. This is useful to examine the properties of the data. draw_data(design_simple) %&gt;% as_tibble() ## # A tibble: 290 × 15 ## village HHsizeMAE HouseholdType Head_EducationLevel LandOwned NFertInput ## &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 2.2 woman_single &lt;NA&gt; 3.12 5 ## 2 1 6.9 couple primary 4.69 26 ## 3 1 1.86 couple No_school 2 40 ## 4 1 6.92 polygamous &lt;NA&gt; 0.72 0 ## 5 1 7.06 couple primary 0.312 10 ## 6 1 4.3 couple No_school 0.5 25 ## 7 1 4.94 couple primary 1.25 25 ## 8 1 5.06 couple primary 1 60 ## 9 1 1.5 couple primary 37 0 ## 10 1 2.18 couple primary 1.88 0 ## # ℹ 280 more rows ## # ℹ 9 more variables: food_secure &lt;dbl&gt;, educated &lt;dbl&gt;, female &lt;dbl&gt;, ## # hh &lt;int&gt;, ID &lt;chr&gt;, Y_Z_0 &lt;dbl&gt;, Y_Z_1 &lt;dbl&gt;, Z &lt;int&gt;, Y &lt;dbl&gt; Now to calculate our power. The diagnose_design() will run our model 500 times and our power is simply the fraction of times we find a statistically significant effect. set.seed(1) diagnose_design(design_simple) ## ## Research design diagnosis based on 500 simulations. Diagnosis completed in 5 secs. Diagnosand estimates with bootstrapped standard errors in parentheses (100 replicates). ## ## Design Inquiry Estimator Outcome Term N Sims Mean Estimand ## design_simple ATE Simple Y Z 500 70.00 ## (0.00) ## Mean Estimate Bias SD Estimate RMSE Power Coverage ## 67.30 -2.70 59.82 59.82 0.23 1.00 ## (2.38) (2.38) (0.84) (0.81) (0.02) (0.00) Our power is 0.23, meaning we found a significant result in 23% of our model runs. That’s way lower than the traditional 80% threshold. How large should our effect size be to reach a power of 0.8? We can use the redesign() function for this. Redesign allows you to vary certain parameters of your design, and run the design 500 times for each value of the parameter. Here I set it to run 200 times, as that takes long enough already. set.seed(1) diagnosis_simple &lt;- design_simple %&gt;% redesign(effect_size_simple = seq(100,300,50)) %&gt;% diagnose_design(sims = 200) %&gt;% tidy() %&gt;% as_tibble() Now, I want a nice plot. For this I filter the tibble I created, and pipe it into ggplot(): diagnosis_simple %&gt;% filter(diagnosand == &quot;power&quot;) %&gt;% select(effect_size_simple,power = estimate) %&gt;% ggplot(aes(x = effect_size_simple, y = power)) + geom_line() + geom_point() + geom_hline(yintercept=0.8,linetype=2) We can reliably detect an effect size between 150 and 200 kgs of fertilizer. The mean fertilizer use is 70kg, so that seems unlikely to be realistic. Perhaps we should add covariates? Adding more estimators I define another estimator that includes covariates in its model specification, and add it to my original design, hoping this will increase power. estimator_simple_cov &lt;- declare_estimator(Y ~ Z + LandOwned + educated + female, clusters = village, inquiry = &quot;ATE&quot;, term = &quot;Z&quot;, label = &quot;Simple Cov&quot;) design_simple_cov &lt;- design_simple + estimator_simple_cov set.seed(1) diagnosis_simple_cov &lt;- design_simple_cov %&gt;% redesign(effect_size_simple = seq(100,300,50)) %&gt;% diagnose_design(sims = 200) %&gt;% tidy() %&gt;% as_tibble() diagnosis_simple_cov %&gt;% filter(diagnosand == &quot;power&quot;) %&gt;% rename(power = estimate) %&gt;% ggplot(aes(x = effect_size_simple, y = power, color = estimator, shape = estimator)) + geom_line() + geom_point() + geom_hline(yintercept=0.8,linetype=2) ## Error in eval(expr, envir, enclos): object &#39;diagnosis_simple_cov&#39; not found Turns out it doesn’t help at all… Dif in diff We can of course also opt for a diff-in-diff design. But then we have to pretend we have two rounds of data collection. For that, I prefer to use dplyr, but it should be possible with fabricate() as well. I first rename all our time-variant varaible to have _0 at the end, create a bunch of correlated varaibles with _1 at the end, and then pivot_longer. effect_size_dd &lt;- 70 sd_dd &lt;- 100 model_dd &lt;- declare_model( rhomis %&gt;% # add one more year rename_with(~ paste0(., &quot;_0&quot;), HHsizeMAE:female) %&gt;% mutate(food_secure_1 = correlate(given = food_secure_0, draw_handler = draw_binomial, prob = mean(food_secure_0) , rho = 0.9), HHsizeMAE_1 = HHsizeMAE_0 + rnorm(n = nrow(.), mean = 0, sd = 0.1), NFertInput_1 = pmax(0,NFertInput_0 + rnorm(n = nrow(.), mean = 0, sd = sd_dd))) %&gt;% pivot_longer(ends_with(c(&quot;_0&quot;,&quot;_1&quot;)), names_to = c(&quot;.value&quot;, &quot;t&quot;), names_pattern = &quot;(.*)_([0-9]+)$&quot;, values_drop_na = TRUE, names_transform = list(t = as.integer)), potential_outcomes(Y ~ NFertInput + Z * effect_size_dd) ) I modify the inquiry and assignment to only take into account t == 1 inquiry_dd &lt;- declare_inquiry(ATE = mean(Y_Z_1 - Y_Z_0), subset = (t == 1)) assignment_dd &lt;- declare_assignment(treatment_group = cluster_ra(clusters = village, prob = 0.5), Z = t * treatment_group) Measurement is unchanged: measurement_dd &lt;- declare_measurement( Y = reveal_outcomes(Y~Z) ) Then I use feols() from the fixest package to estimate a Two-way fixed effects (2FE) model. This can be easily extended to more complex designs (but beware!). library(fixest) # library(broom) estimator_dd &lt;- declare_estimator(Y ~ Z | treatment_group + t, cluster = &quot;village&quot;, .method = feols, term = &quot;Z&quot;, inquiry = &quot;ATE&quot;, label = &quot;2FE&quot;) Let’s have a look at our power now! Of course, in a DiD setting, power depends not only on the effect size, but also on how well the years correlate. I therefore also vary the sd_dd variable, which adds increase between-year variation design_dd &lt;- model_dd + assignment_dd + inquiry_dd + measurement_dd + estimator_dd set.seed(1) diagnosis_dd &lt;- design_dd %&gt;% redesign(effect_size_dd = seq(10,90,20), sd_dd = c(100,200)) %&gt;% diagnose_design(sims = 100) %&gt;% tidy() %&gt;% as_tibble() Our power is now a lot better, even if we turn up the variance diagnosis_dd %&gt;% filter(diagnosand == &quot;power&quot;) %&gt;% rename(power = estimate) %&gt;% mutate(sd_dd = factor(sd_dd)) %&gt;% ggplot(aes(x = effect_size_dd, y = power, color = sd_dd, shape = sd_dd)) + geom_line() + geom_point() + geom_hline(yintercept=0.8,linetype=2) Propsensity score matching Finally, let’s imagine a Propensity Score matching scenario. We therefore need to pretend treatment isn’t random, but is correlated to the outcome. Let’s also look at food_secure, since it’s binary, and thus adds a twist here and there. Finally, I will use the resample_data() function to pretend that we can visit more households than are in my original data set. Declare Design Let’s put this in declare design. Treatment assignment is as follows: 50% of the villages are selected for treatment. This is just random. Roughly 50% of the households are selected. The selection indicator will have a correlation of rho with the household being educated, using fabricatr’s correlate() function. Education is also a strong predictor of food_security, creating inherent bias. I compare a standard difference in means, as well as a custom matching function that uses the MatchIt package to create a balanced data set, that I can then use for regular regressions, weighted by the propensity score. set.seed(1) library(MatchIt, exclude(&quot;select&quot;)) # the select function would conflict with dplyr # this syntax requires R 4.0 or higher # set parameters effect &lt;- 0.2 rho &lt;- 0.2 population_psm &lt;- declare_population( # rhomis %&gt;% # mutate(treated_hh = correlate(given = educated, draw_handler = draw_binary, prob = 0.5 , rho = rho), # potential_outcomes(Y ~ pmin(1,food_secure + Z * draw_binary(effect,nrow(.))))) N = nrow(rhomis), rhomis, potential_outcomes(Y ~ pmin(1,food_secure + Z * draw_binary(effect,N))) ) assignment_psm &lt;- declare_assignment( treated_hh = correlate(given = educated, draw_handler = draw_binary, prob = 0.5 , rho = rho), treated_vill = cluster_ra(clusters = village, prob = 0.5), Z = treated_hh * treated_vill ) I then re-sample from the original data using resample_hhs() I define below. To include the funciton in our design, we need to use declare_step() I ensure I have more control household than treatment households. I drop any untreated households in treated villages. Compared to the treatment hhs in each cluster, I sample twice the number of control hhs. This simulates that we can’t get control households in treated villages, for example due to fears of clusters_treat &lt;- 50 hh_treat &lt;- 15 clusters_control_multi &lt;- 1 # multiplier for oversampling control clusters hh_control_multi &lt;- 2 # multiplier for oversampling control hhs resample_hhs &lt;- function(data){ # this function filters any control househols in treated communities # and it sets the sample size data %&gt;% mutate(drop = if_else(treated_vill == 1 &amp; treated_hh == 0,1,0)) %&gt;% filter(drop != 1) %&gt;% # sample from treated villages and untreated villages group_by(treated_vill) %&gt;% do({ if (unique(.$treated_vill) == 1) { resample_data(., N = c(village = clusters_treat, hh = hh_treat),unique_labels = TRUE) } else { resample_data(., N = c(village = clusters_control_multi * clusters_treat, hh = hh_control_multi * hh_treat), unique_labels = TRUE) } }) } resampling_psm &lt;- declare_step( handler = resample_hhs ) Measurement and inquiry are standard. I also add an OLS estimator to check for bias. measurement_psm &lt;- declare_measurement(Y = reveal_outcomes(Y ~ Z) ) inquiry_psm &lt;- declare_inquiry(ATE = mean(Y_Z_1 - Y_Z_0) ) estimator_notmatched_psm &lt;- declare_estimator(Y ~ Z, clusters = village_unique, inquiry = &quot;ATE&quot;, term = &quot;Z&quot;, label = &quot;Not matched&quot;) Finally, I need to somehow put my matching model in DeclareDesign. Fortunately, you can put any the output of any function into the declare_estimator() function using the handler argument. It does need to accept a data argument, and output a tidy() dataframe. My function custom_match() accepts a data frame, uses MatchIt to create a matched data set, I define a function that does that, and some labelling: custom_match &lt;- function(data, equation, outcome = &quot;Y&quot;, term = &quot;Z&quot;) { # the command filter(term == term) wouldn&#39;t do anything, so this is a workaround term_value &lt;- term # run the matching model matchit_model &lt;- matchit(equation, data = data, method = &quot;nearest&quot;) matched_df &lt;- match.data(matchit_model) # run a regression, weighted by the propensity score lm_robust(Y ~ Z, clusters = village_unique, data = matched_df, weights = weights) %&gt;% tidy() %&gt;% mutate(outcome = outcome) %&gt;% filter(term == term_value) } estimator_matched_psm &lt;- declare_estimator( Z ~ HHsizeMAE + educated + LandOwned + NFertInput + female + NFertInput, handler = label_estimator(custom_match), inquiry = &quot;ATE&quot;, # Tie the estimator to the declared inquiry label = &quot;Matched&quot;, term = &quot;Z&quot;, ) design_psm &lt;- population_psm + inquiry_psm + assignment_psm + resampling_psm + measurement_psm + estimator_notmatched_psm + estimator_matched_psm Checking balance It’s useful to explore the property’s of our matching estimator. First I draw data based on my design and create matched version of that data. set.seed(1) test_data &lt;- draw_data(design_psm) %&gt;% as_tibble() matchit_model &lt;- matchit(Z ~ HHsizeMAE + educated + LandOwned + NFertInput + female + NFertInput, data = test_data, method = &quot;nearest&quot;) matched_df &lt;- match.data(matchit_model) Then I create balance table for the test_data: library(modelsummary) library(flextable) # balance table test_data %&gt;% mutate(Z = factor(Z, labels = c(&quot;Control&quot;, &quot;Treatment&quot;))) %&gt;% select(Z, Y, food_secure, HHsizeMAE, educated, LandOwned, NFertInput, female, NFertInput) %&gt;% datasummary_balance( ~ Z , data = ., output = &quot;flextable&quot;, stars = TRUE, dinm = TRUE, dinm_statistic = &quot;p.value&quot;) %&gt;% fix_border_issues() %&gt;% autofit() .cl-fd526738{}.cl-fd4cb4a0{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-fd4efa80{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-fd4f0be2{width:1.126in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0bec{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0bed{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0bee{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0bf6{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0bf7{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0bf8{width:0.757in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0c00{width:1.126in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0c01{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0c0a{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0cb4{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0cbe{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0cbf{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0cc0{width:0.757in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0cc8{width:1.126in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0cc9{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0cca{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0cd2{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0cd3{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0cdc{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0ce6{width:0.757in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0ce7{width:1.126in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0cf0{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0cf1{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0cfa{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0cfb{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d04{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d05{width:0.757in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d0e{width:1.126in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d0f{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d10{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d18{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d19{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d1a{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d22{width:0.757in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d23{width:1.126in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d24{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d2c{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d36{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d37{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d40{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d41{width:0.757in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d42{width:1.126in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d4a{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d4b{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d4c{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d54{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d55{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d5e{width:0.757in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d5f{width:1.126in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d60{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d68{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d69{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d6a{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d6b{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd4f0d72{width:0.757in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} Control (N=1500)Treatment (N=750) MeanStd. Dev.Mean Std. Dev. Diff. in MeanspY0.50.50.50.50.00.152food_secure0.50.50.30.5-0.2***&lt;0.001HHsizeMAE4.61.64.11.9-0.5***&lt;0.001educated0.70.50.50.5-0.2***&lt;0.001LandOwned7.873.01.21.4-6.5***&lt;0.001NFertInput84.2473.543.5150.0-40.7**0.002female0.20.40.40.50.2***&lt;0.001 And for the matched_df, which is clearly more balanced. Note that according to the documentation, datasummary_balance() reports weighted means if a weights variable is present. matched_df %&gt;% mutate(Z = factor(Z, labels = c(&quot;Control&quot;, &quot;Treatment&quot;))) %&gt;% select(Z, Y, food_secure, HHsizeMAE, educated, LandOwned, NFertInput, female, NFertInput) %&gt;% datasummary_balance( ~ Z , data = ., output = &quot;flextable&quot;, stars = TRUE, dinm = TRUE, dinm_statistic = &quot;p.value&quot;) %&gt;% fix_border_issues() %&gt;% autofit() .cl-fd7ce864{}.cl-fd772f8c{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-fd79724c{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-fd7985a2{width:1.126in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985a3{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985ac{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985ad{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985b6{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985b7{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985b8{width:0.757in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985c0{width:1.126in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985c1{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985ca{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985d4{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985de{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985df{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985e8{width:0.757in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985e9{width:1.126in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985ea{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985f2{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985f3{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985fc{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd7985fd{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798606{width:0.757in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798607{width:1.126in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798610{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798611{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798612{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd79861a{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798624{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798625{width:0.757in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798626{width:1.126in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd79862e{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd79862f{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798638{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798639{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd79863a{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798642{width:0.757in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798643{width:1.126in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd79864c{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd79864d{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd79864e{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798656{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798657{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798660{width:0.757in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798661{width:1.126in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd79866a{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd79866b{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798674{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798675{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798676{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd79867e{width:0.757in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd79867f{width:1.126in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798680{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798688{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798689{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd79868a{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798692{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fd798693{width:0.757in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} Control (N=750)Treatment (N=750) MeanStd. Dev.Mean Std. Dev. Diff. in MeanspY0.50.50.50.50.00.918food_secure0.50.50.30.5-0.1***&lt;0.001HHsizeMAE4.31.44.11.9-0.2+0.061educated0.50.50.50.50.00.163LandOwned1.31.31.21.4-0.10.114NFertInput68.8246.543.5150.0-25.3*0.017female0.40.50.40.50.00.747 Let’s run the models two times: unmatched_model &lt;- lm_robust(Y ~ Z, clusters = village_unique, data = test_data) matched_model &lt;- lm_robust(Y~Z, clusters = village_unique, data = matched_df, weights = weights) modelsummary(list(lm = unmatched_model, psm = matched_model), output = &quot;flextable&quot;, gof_map = c(&quot;nobs&quot;,&quot;r.squared&quot;,&quot;adj.r.squared&quot;)) .cl-fda94152{}.cl-fda40354{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-fda63502{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-fda6454c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fda64556{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fda64560{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-fda6456a{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} lmpsm(Intercept)0.5030.473(0.027)(0.033)Z-0.032-0.003(0.040)(0.044)Num.Obs.22501500R20.0010.000R2 Adj.0.000-0.001 Both of these underestimate the treatment effect by a bit, as it should be around 0.2. Bias Now, let’s diagnose the design! First, let’s examine bias, given selection effects. The strength of the selection effect is given by rho, so I use redesign() to vary it: diagnosis_psm_bias &lt;- design_psm %&gt;% redesign(rho = seq(from = 0, to = 0.9, by = 0.3)) %&gt;% diagnose_design(sims = 100) %&gt;% tidy() %&gt;% as_tibble() And I put the result in a plot: diagnosis_psm_bias %&gt;% filter(diagnosand == &quot;bias&quot;) %&gt;% select(rho, bias = estimate, estimator) %&gt;% ggplot(aes(x = rho, y = bias, shape = estimator, color=estimator)) + geom_line() + geom_point() Clearly, the more treatment is correlated to education, the higher the bias in the regular model. Bias is never extreme, however. Power Then, let’s examine power. diagnosis_psm_power &lt;- design_psm %&gt;% redesign(clusters_treat = c(20,40,60), effect = seq(0.1,0.4,0.1)) %&gt;% diagnose_design(sims = 100) %&gt;% tidy() %&gt;% as_tibble() When we plot the results, it seems sample size doesn’t affect power much (not sure why, perhaps the resampling?). The design can pick up an effect of 0.4, meaning that 40% of the food insecure beneficaries become food secure. The actual treatment effect would be lower, as some beneficiaries would have been food secure before the intervention. diagnosis_psm_power %&gt;% filter(diagnosand == &quot;power&quot;) %&gt;% select(clusters_treat, power = estimate, estimator, effect) %&gt;% ggplot(aes(x = clusters_treat, y = power, shape = estimator, color=estimator)) + geom_line() + geom_point() + geom_hline(yintercept=0.8,linetype=2) + facet_wrap(~effect) "],["data-exploration.html", "Data Exploration Setup Making a codebook from a Stata .dta Correlogram", " Data Exploration The first step of using data is exploring it. I will use Stata data because it has labels, making it easy to get a sense of the data once you get the hang of how labels are dealt with in R. Setup Download the cars data set from here or run the code below: download.file( &quot;https://raw.githubusercontent.com/kleuveld/r_cheatsheet/main/data/cars.dta&quot;, here(&quot;data/cars.dta&quot;), mode = &quot;wb&quot; ) Making a codebook from a Stata .dta In Stata variables have labels, which is great because they’re more informative than variable names. In R, it can be a bit tricky to access the labels of imported dta’s, but making a code book isn’t that hard. First, load the cars data set: library(tidyverse) library(haven) library(here) cars &lt;- read_dta(here(&quot;data/cars.dta&quot;)) The variable labels are stored as attributes of the variables. The attributes() function returns all attributes: attributes(cars$mpg) ## $label ## [1] &quot;miles per gallon&quot; ## ## $format.stata ## [1] &quot;%9.0g&quot; To see only the label use: attributes(cars$mpg)$label ## [1] &quot;miles per gallon&quot; To create a data frame with all variable labels we can apply attributes() to all variables using map_chr() from the purrr package: codebook &lt;- tibble(var = colnames(cars), label = map_chr(cars,~attributes(.x)$label)) codebook ## # A tibble: 4 × 2 ## var label ## &lt;chr&gt; &lt;chr&gt; ## 1 mpg miles per gallon ## 2 cyl number of cylinders ## 3 eng engine displacement in cubic inches ## 4 wgt vehicle weight in pounds To make it slightly more useful, we can add some summary statistics. I can apply a number of functions to a data frame using map_dbl(), which returns a named vector: list_of_functions &lt;- list(mean=mean,sd=sd,min=min,max=max) list_of_functions %&gt;% map_dbl(~.x(cars$mpg, na.rm = TRUE)) ## mean sd min max ## 23.445918 7.805007 9.000000 46.599998 To do this for every column in a dataframe, I wrap the code above in a function, and use map() to apply that function to the columns. stats_to_tibble &lt;- function(var,funs) { funs %&gt;% map_dbl(~ifelse(is.numeric(var),.x(var,na.rm = TRUE),NA)) %&gt;% as_tibble_row() } summ_stats &lt;- cars %&gt;% map(~stats_to_tibble(.x,list_of_functions)) %&gt;% list_rbind() summ_stats ## # A tibble: 4 × 4 ## mean sd min max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 23.4 7.81 9 46.6 ## 2 5.47 1.71 3 8 ## 3 194. 105. 68 455 ## 4 2978. 849. 1613 5140 I can bind that with the codebook I had before to get a nice overview of all the variables in my dataset: bind_cols(codebook, summ_stats) ## # A tibble: 4 × 6 ## var label mean sd min max ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 mpg miles per gallon 23.4 7.81 9 46.6 ## 2 cyl number of cylinders 5.47 1.71 3 8 ## 3 eng engine displacement in cubic inches 194. 105. 68 455 ## 4 wgt vehicle weight in pounds 2978. 849. 1613 5140 Here’s a re-usable function that add more columns, handles empty labels (using coalesce()) and rounds the output so it’s human-readable: create_codebook &lt;- function(.df,stats = list(mean=mean,sd=sd,min=min,max=max, prop_miss=prop_miss)) { labels &lt;- tibble(var = colnames(.df), label = map_chr(.df,function(x) coalesce(attributes(x)$label,&quot;&quot;)), type = map_chr(.df, typeof)) prop_miss &lt;- function(x,na.rm = TRUE) { mean(is.na(x)) } stats_to_tibble &lt;- function(var,stats) { map_dbl(stats,~ifelse(is.numeric(var),.x(var,na.rm = TRUE),NA)) %&gt;% as_tibble_row() } sumstats &lt;- .df %&gt;% map(~stats_to_tibble(.x,stats)) %&gt;% list_rbind() %&gt;% mutate(across(where(is.numeric), ~round(.x,2))) bind_cols(labels,sumstats) } create_codebook(cars) ## # A tibble: 4 × 8 ## var label type mean sd min max prop_miss ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 mpg miles per gallon doub… 2.35e1 7.81 9 46.6 0 ## 2 cyl number of cylinders doub… 5.47e0 1.71 3 8 0 ## 3 eng engine displacement in cubic… doub… 1.94e2 105. 68 455 0 ## 4 wgt vehicle weight in pounds doub… 2.98e3 849. 1613 5140 0 Correlogram Another great data exploration tool is the correlogram, which displays the correlations between many variables. To create one, I use ggpairs() from the GGally package: library(GGally) ggpairs(cars) You can also split the correlogram by a variable, like I do with the number of cylinders below: cars %&gt;% ggpairs(columns = c(1,3,4), ggplot2::aes(colour=factor(cyl))) "],["programming.html", "Programming with R Loops Functions Map()", " Programming with R You can improve your R code by using programming features such as loops and functions to make your code reusable. This prevents errors, while saving you time. Loops Loops repeat code a number of time, they have the following structure: for (i in 1:4){ print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 The i is the iterator, and each iteration of the loop it takes on the value of a different element of the object that follows the in; in this case, i takes on 1,2,3 and finally 4 as its values. Therefore, this code is equivalent to: print(1) ## [1] 1 print(2) ## [1] 2 print(3) ## [1] 3 print(4) ## [1] 4 But it’s much easier to maintain! Imagine having to do 86 iterations: you would need to copy paste the code 85 times every time you want to update something. Using loops, you don’t need to copy-paste a thing, leading to fewer errors. While loops can be a perfectly fine way of doing repeated work, most R programmers prefer not to use loops, but instead use functions such as lapply() and map(). However, for this you will need to know functions. Functions Basic Functions A function is an R object that’s essentially a shortcut to run a bit of code. Usually, a function takes an argument (the input), and returns an output. The argument is always provided within parentheses. The sqrt() function, for example, takes a number as its argument and returns the square root. sqrt(4) ## [1] 2 The beauty of functions is that they allow you to define a set of operations in one place, and re-use it as often as you want. If you then need to update the operations, all you need to do is update the function, instead of hunting down every instance of the operations throughout your script. Take for example the following code that cleans missing data. #define an example variable variable1 = c(1,2,3,-99,5,6) #change missing variable1_cleaned = if_else(variable1 == -99, NA,variable1) variable1_cleaned ## [1] 1 2 3 NA 5 6 This works, but I need to do this at many different places in my code, and when copying the code to other places, it’s easy to make small mistakes. Moreover, if I notice my procedure for cleaning missing data is wrong, I will have to hunt down all the places I’ve copied this code to, and change it (which, again, is an error prone process). A common piece of advice is to put any code that you have to copy-paste more than twice in a function. Once I do that, I can just call the function wherever I need to clean data; if I want to change how I deal with missings, I now only have to make changes in one place: clean_missing &lt;- function(input_data) { returned_data &lt;- if_else(input_data == -99, NA, input_data) return(returned_data) } I’ve pretty much copied the code I had above. Note that I could have used any name for my argument (defined in the parentheses after function); I just thought input_data made sense. I use the return() function to return data. I can now just use the clean_data() wherever I want: variable1_cleaned &lt;- clean_missing(variable1) variable1_cleaned ## [1] 1 2 3 NA 5 6 Note that any variables we created in the function are kept within the function, and you can’t access them later: variable1_clean &lt;- clean_missing(variable1) returned_data ## Error in eval(expr, envir, enclos): object &#39;returned_data&#39; not found This keeps your working environment nice and clean, which again prevents problems. Above I used the return function. This is not needed. Anything on the last line of the function that would normally be returned to the console, is used a return value of the function: clean_missing &lt;- function(input_data) { if_else(input_data == -99, NA, input_data) } clean_missing(variable1) ## [1] 1 2 3 NA 5 6 Functions and the tidyverse In the previous function I passed a vector to clean, what if want to use it in a data cleaning pipe? It’s useful to start with the code without a function, and then to generalize from there: data_frame &lt;- tibble(variable1 = variable1) data_frame %&gt;% mutate(variable1 = if_else(variable1 == -99,NA,variable1)) ## # A tibble: 6 × 1 ## variable1 ## &lt;dbl&gt; ## 1 1 ## 2 2 ## 3 3 ## 4 NA ## 5 5 ## 6 6 Let’s try to put that in a function. The function will need to take a data frame and a variable name as its arguments. Results from one step in the pipe, are passed as the first argument for the next step. So make sure the data is the first argument! clean_missing_df &lt;- function(input_dataframe, variablename){ input_dataframe %&gt;% mutate(variablename = if_else(variablename == -99,NA, variablename)) } data_frame %&gt;% clean_missing_df(variable1) ## # A tibble: 6 × 2 ## variable1 variablename ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 ## 2 2 2 ## 3 3 3 ## 4 -99 NA ## 5 5 5 ## 6 6 6 Wait, something went wrong! R just created a new variable called “variablename”. For a technical note on why this is, see here. In short, we want R too look what’s in variablename, not just use it as is. To do so, wrap the variable name in your function definition in {{ and }}, and change the = in mutatate to :=. clean_missing_df &lt;- function(input_dataframe, variablename){ input_dataframe %&gt;% mutate({{ variablename }} := if_else({{ variablename }} == -99, NA, {{ variablename }})) } data_frame %&gt;% clean_missing_df(variable1) ## # A tibble: 6 × 1 ## variable1 ## &lt;dbl&gt; ## 1 1 ## 2 2 ## 3 3 ## 4 NA ## 5 5 ## 6 6 Example 1: Re-using plot specifications If you’re writing a report that includes the same type of plot in many places, it makes sense to make it into a function. Let’s take the stacked bar plot from the plotting chapter: library(ggthemewur) stacked_bar_plot &lt;- function(df, by, fill) { # outputs a stacked bar chart df %&gt;% mutate( {{ by }} := count_label( {{ by }})) %&gt;% ggplot(aes(y = {{ by }}, fill = {{ fill }})) + geom_bar(position = position_fill(reverse = TRUE)) + labs(x= &quot;&quot;) + theme_wur() + scale_fill_wur_discrete() + geom_text(stat = &quot;count&quot;, aes(label = after_stat(count)), position = position_fill(vjust = 0.5, reverse = TRUE), color = &quot;white&quot;) + scale_x_continuous(labels = scales::percent_format()) + theme(legend.position=&quot;bottom&quot;) + guides(fill = guide_legend(nrow = 1, title.position=&quot;top&quot;, title.hjust = 0.5)) } count_label &lt;- function(vector) { # takes a vector of strings or factor, # output a factor vector with N = N included in the labels fct_recode(factor(vector), !!!vector %&gt;% as_tibble() %&gt;% group_by(value) %&gt;% summarize(n = n()) %&gt;% mutate(value = as.character(value), newlabel = paste0(value,&quot;\\nn=&quot;,n)) %&gt;% pull(value, name = newlabel)) } read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% stacked_bar_plot(village,respondent_wall_type) read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% stacked_bar_plot(village,affect_conflicts) Note that the count_label() function adds group counts to factor variable labels. This is useful for the by variable. I am not sure if I understand what the !!! operator means, but it works. The function basically creates a named vector, where the vector values are the old factor labels, and the vector names are new factor labels. The new labels include the N, which is computed using a standard group_by() %&gt;% summarize() pipeline. Example 2: Function to create dummies from text Remember our code to generate dummies based on text: read_csv(&quot;data/SAFI_clean.csv&quot;, na = &quot;NULL&quot;) %&gt;% mutate(items_owned = ifelse(is.na(items_owned),&quot;None&quot;,items_owned)) %&gt;% select(key_ID,items_owned) %&gt;% separate_longer_delim(items_owned, delim = &quot;;&quot;) %&gt;% mutate(value = 1) %&gt;% pivot_wider(names_from = items_owned, values_from = value, names_prefix = &quot;owns_&quot;, values_fill = 0) ## Rows: 131 Columns: 14 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (7): village, respondent_wall_type, memb_assoc, affect_conflicts, items... ## dbl (6): key_ID, no_membrs, years_liv, rooms, liv_count, no_meals ## dttm (1): interview_date ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## # A tibble: 131 × 19 ## key_ID owns_bicycle owns_television owns_solar_panel owns_table owns_cow_cart ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 1 1 1 0 ## 2 2 1 0 1 1 1 ## 3 3 0 0 0 0 0 ## 4 4 1 0 1 0 0 ## 5 5 0 0 0 0 0 ## 6 6 0 0 0 0 0 ## 7 7 0 0 0 0 0 ## 8 8 1 1 1 1 0 ## 9 9 0 1 1 0 0 ## 10 10 1 1 1 1 1 ## # ℹ 121 more rows ## # ℹ 13 more variables: owns_radio &lt;dbl&gt;, owns_cow_plough &lt;dbl&gt;, ## # owns_solar_torch &lt;dbl&gt;, owns_mobile_phone &lt;dbl&gt;, owns_motorcyle &lt;dbl&gt;, ## # owns_None &lt;dbl&gt;, owns_fridge &lt;dbl&gt;, owns_electricity &lt;dbl&gt;, ## # owns_sofa_set &lt;dbl&gt;, owns_lorry &lt;dbl&gt;, owns_sterio &lt;dbl&gt;, ## # owns_computer &lt;dbl&gt;, owns_car &lt;dbl&gt; I now want to apply this same principle to months_lack_food column. I could copy-paste the code, but the better solution is to make a function: create_dummies &lt;- function(df,stringvar,prefix=&quot;&quot;,delim = &quot;;&quot;) { #Function that generates dummies from a string variable #containing multi-response answers #returns dataset without original var, but with dummies. df %&gt;% separate_longer_delim({{ stringvar }}, delim = delim) %&gt;% mutate(value = 1) %&gt;% pivot_wider(names_from = {{stringvar}}, values_from = value, names_prefix = prefix, values_fill = 0) } read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% mutate(items_owned = ifelse(is.na(items_owned),&quot;None&quot;,items_owned)) %&gt;% create_dummies(stringvar = items_owned, prefix = &quot;owns_&quot;) %&gt;% create_dummies(months_lack_food,&quot;lack_food_&quot;) ## Rows: 131 Columns: 14 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (7): village, respondent_wall_type, memb_assoc, affect_conflicts, items... ## dbl (6): key_ID, no_membrs, years_liv, rooms, liv_count, no_meals ## dttm (1): interview_date ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## # A tibble: 131 × 43 ## key_ID village interview_date no_membrs years_liv respondent_wall_type ## &lt;dbl&gt; &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 1 God 2016-11-17 00:00:00 3 4 muddaub ## 2 2 God 2016-11-17 00:00:00 7 9 muddaub ## 3 3 God 2016-11-17 00:00:00 10 15 burntbricks ## 4 4 God 2016-11-17 00:00:00 7 6 burntbricks ## 5 5 God 2016-11-17 00:00:00 7 40 burntbricks ## 6 6 God 2016-11-17 00:00:00 3 3 muddaub ## 7 7 God 2016-11-17 00:00:00 6 38 muddaub ## 8 8 Chirodzo 2016-11-16 00:00:00 12 70 burntbricks ## 9 9 Chirodzo 2016-11-16 00:00:00 8 6 burntbricks ## 10 10 Chirodzo 2016-12-16 00:00:00 12 23 burntbricks ## # ℹ 121 more rows ## # ℹ 37 more variables: rooms &lt;dbl&gt;, memb_assoc &lt;chr&gt;, affect_conflicts &lt;chr&gt;, ## # liv_count &lt;dbl&gt;, no_meals &lt;dbl&gt;, instanceID &lt;chr&gt;, owns_bicycle &lt;dbl&gt;, ## # owns_television &lt;dbl&gt;, owns_solar_panel &lt;dbl&gt;, owns_table &lt;dbl&gt;, ## # owns_cow_cart &lt;dbl&gt;, owns_radio &lt;dbl&gt;, owns_cow_plough &lt;dbl&gt;, ## # owns_solar_torch &lt;dbl&gt;, owns_mobile_phone &lt;dbl&gt;, owns_motorcyle &lt;dbl&gt;, ## # owns_None &lt;dbl&gt;, owns_fridge &lt;dbl&gt;, owns_electricity &lt;dbl&gt;, … The code is now clear, I can update the function in one place and all variables will be updated accordingly. Plus, if I want to use the same code in another project, I can easily do it. Map() map() works just like loop, but generally faster. It takes two arguments: An iterable object, like a vector or list A function It will then apply the function to each element of the object. It will return a list with the results of each iteration. For example, to get the the square root for each of the numbers in a vector: vector &lt;- c(4,9,16) map(vector,sqrt) ## [[1]] ## [1] 2 ## ## [[2]] ## [1] 3 ## ## [[3]] ## [1] 4 You may not quite like the fact that map returns a list, but quite a few things in R use lists. modelsummary() for example. Suppose I want to regress the same y on a number of combinations of independent variables, I can put the combination of varaibles in a list, and then run my model for each element of the list. I use reformulate() to convert strings into a formula ‘lm()’ can use. Also, I use ~ to create a purrr-style inline anonymous function within map(). library(modelsummary) # generate some sample data df &lt;- tibble(y = rnorm(50),x1 = rnorm(50),x2 = rnorm(50)) # define a list of models: # the left-hand sides are the labels # the right-hand sides the independent variables I will pass to reformulate. models &lt;- list(&quot;X1 only&quot; = &quot;x1&quot;, &quot;X2 only&quot; = &quot;x2&quot;, &quot;Both&quot; = c(&quot;x1&quot;,&quot;x2&quot;)) # map() works nicely in dplyr pipe! # the ~ creates a purrr-style anonymous function, where .x is current element of the list models %&gt;% map(~lm(reformulate(.x, response=&quot;y&quot;),data = df)) %&gt;% modelsummary(output = &quot;flextable&quot;) .cl-00f3b00e{}.cl-00edf470{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-00f05986{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-00f06ae8{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-00f06ae9{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-00f06af2{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-00f06af3{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} X1 onlyX2 onlyBoth(Intercept)0.1290.1310.132(0.139)(0.139)(0.140)x10.0850.092(0.135)(0.136)x20.0860.093(0.136)(0.137)Num.Obs.505050R20.0080.0080.018R2 Adj.-0.012-0.012-0.024AIC144.1144.1145.6BIC149.8149.8153.2Log.Lik.-69.038-69.036-68.794F0.3980.4020.427RMSE0.960.960.96 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
