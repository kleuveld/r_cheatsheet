[["index.html", "R Cheat Sheet Introduction About Setting up", " R Cheat Sheet Koen 2024-09-12 Introduction About This website is intended as a quick reference for some techiques that I think I may need when cleaning, analyzing, or presenting data. For a more basic intro to R try the R for Social Science Data Carpentry Workshop , on which some of this website is based. Setting up This book uses the SAFI data set, and a large number of libraries. The following will download them all. I use the here package to manage paths. #make sure your working folder is set to something sensible! file.create(&quot;.here&quot;) here::i_am(&quot;.here&quot;) library(here) dir.create(here(&quot;data&quot;)) download.file( &quot;https://raw.githubusercontent.com/datacarpentry/r-socialsci/main/episodes/data/SAFI_clean.csv&quot;, here(&quot;data/SAFI_clean.csv&quot;), mode = &quot;wb&quot; ) install.packages(c(&quot;tidyverse&quot;,&quot;here&quot;,&quot;arsenal&quot;,&quot;lmtest&quot;,&quot;sandwich&quot;,&quot;here&quot;, &quot;huxtable&quot;,&quot;flextable&quot;,&quot;declaredesign&quot;,&quot;fixest&quot;)) "],["datawrangling.html", "Data Wrangling Basic Data Manipulation Pivoting (or reshaping) Joining (or merging) data Summarizing over groups (or collapsing data) Row-wise Operations Splitting multi-response variable into dummies", " Data Wrangling Make sure you have the tidyverse installed, and the SAFI data set downloaded to your data folder by running the code from the Set-up section Basic Data Manipulation library(tidyverse) library(here) read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% filter(village == &quot;Chirodzo&quot;) %&gt;% mutate(people_per_room = no_membrs / rooms, years_liv = if_else(years_liv &gt; 90, NA, years_liv), respondent_wall_type = as_factor(respondent_wall_type), respondent_wall_type = fct_recode(respondent_wall_type, &quot;Burned bricks&quot; = &quot;burntbricks&quot;, &quot;Mud Daub&quot; = &quot;muddaub&quot;, &quot;Sun bricks&quot; = &quot;sunbricks&quot;), conflict_yn = case_when(affect_conflicts == &quot;frequently&quot; ~ 1, affect_conflicts == &quot;more_once&quot; ~ 1, affect_conflicts == &quot;once&quot; ~ 1, affect_conflicts == &quot;never&quot; ~ 0, .default = NA), day = day(interview_date), month = month(interview_date), year = year(interview_date)) %&gt;% select(key_ID:rooms, day:people_per_room, -village) %&gt;% filter(interview_date &gt; &quot;2016-11-16&quot; &amp; interview_date &lt; &#39;2017-01-01&#39;) ## # A tibble: 10 × 9 ## key_ID interview_date no_membrs years_liv respondent_wall_type rooms ## &lt;dbl&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 10 2016-12-16 00:00:00 12 23 Burned bricks 5 ## 2 34 2016-11-17 00:00:00 8 18 Burned bricks 3 ## 3 35 2016-11-17 00:00:00 5 45 Mud Daub 1 ## 4 36 2016-11-17 00:00:00 6 23 Sun bricks 1 ## 5 37 2016-11-17 00:00:00 3 8 Burned bricks 1 ## 6 43 2016-11-17 00:00:00 7 29 Mud Daub 1 ## 7 44 2016-11-17 00:00:00 2 6 Mud Daub 1 ## 8 45 2016-11-17 00:00:00 9 7 Mud Daub 1 ## 9 46 2016-11-17 00:00:00 10 42 Burned bricks 2 ## 10 47 2016-11-17 00:00:00 2 2 Mud Daub 1 ## # ℹ 3 more variables: day &lt;int&gt;, conflict_yn &lt;dbl&gt;, people_per_room &lt;dbl&gt; Pivoting (or reshaping) In tidyverse, reshaping is called pivoting. Here’s how you pivot a household roster (reshape wider) so you can merge it with the household data. Creating fake data First, I create sa fake household roster, based on the SAFI data, making sure that the household roster has a number of lines for each household that is equal to the household size, and has two randomly generated variables: female and age. Note that age may be -99, which should be considered missing. long_data &lt;- read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% select(key_ID,no_membrs ) %&gt;% uncount(no_membrs) %&gt;% group_by(key_ID) %&gt;% mutate(member_ID = row_number()) %&gt;% rowwise() %&gt;% mutate(female = sample(0:1,1), age = case_when(member_ID == 1 ~ sample(18:86,1), .default = sample(c(0:86,-99),1))) %&gt;% ungroup() long_data ## # A tibble: 942 × 4 ## key_ID member_ID female age ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 1 0 28 ## 2 1 2 1 70 ## 3 1 3 1 20 ## 4 2 1 1 33 ## 5 2 2 0 8 ## 6 2 3 0 28 ## 7 2 4 1 81 ## 8 2 5 0 49 ## 9 2 6 1 6 ## 10 2 7 0 68 ## # ℹ 932 more rows Pivoting long to wide To merge this into our main data set, we need to make sure we go back to having 1 observation per household. We will do this by using pivot_wider(): wide_data &lt;- long_data %&gt;% pivot_wider(names_from = member_ID, values_from = !ends_with(&quot;_ID&quot;)) %&gt;% relocate(key_ID, ends_with(paste0(&quot;_&quot;,1:19))) wide_data ## # A tibble: 131 × 39 ## key_ID female_1 age_1 female_2 age_2 female_3 age_3 female_4 age_4 female_5 ## &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1 0 28 1 70 1 20 NA NA NA ## 2 2 1 33 0 8 0 28 1 81 0 ## 3 3 1 51 0 11 1 56 1 76 1 ## 4 4 0 43 1 1 0 83 1 24 1 ## 5 5 0 66 0 31 0 12 1 36 0 ## 6 6 1 30 1 71 1 69 NA NA NA ## 7 7 1 51 1 15 1 56 0 28 1 ## 8 8 0 84 0 38 0 82 1 11 1 ## 9 9 0 31 1 24 1 76 0 38 1 ## 10 10 0 46 1 70 1 86 1 37 1 ## # ℹ 121 more rows ## # ℹ 29 more variables: age_5 &lt;dbl&gt;, female_6 &lt;int&gt;, age_6 &lt;dbl&gt;, ## # female_7 &lt;int&gt;, age_7 &lt;dbl&gt;, female_8 &lt;int&gt;, age_8 &lt;dbl&gt;, female_9 &lt;int&gt;, ## # age_9 &lt;dbl&gt;, female_10 &lt;int&gt;, age_10 &lt;dbl&gt;, female_11 &lt;int&gt;, age_11 &lt;dbl&gt;, ## # female_12 &lt;int&gt;, age_12 &lt;dbl&gt;, female_13 &lt;int&gt;, age_13 &lt;dbl&gt;, ## # female_14 &lt;int&gt;, age_14 &lt;dbl&gt;, female_15 &lt;int&gt;, age_15 &lt;dbl&gt;, ## # female_16 &lt;int&gt;, age_16 &lt;dbl&gt;, female_17 &lt;int&gt;, age_17 &lt;dbl&gt;, … We only needed to specify two options: names_from: this is the column that contains the names (or usually numbers) for each of our units of analysis. In this case, the member_ID. values_from: the variables containing the data. All variables you specify here, will get one column for each possible value of names_from. In our case, these variables female and age. I used tidy select syntax to specify all variables except the ones ending in _ID. I use relocate() to reorder the variables. Pivoting wide to long If we had started with wide data, and had wanted to transform to long data, we’d have to use pivot_longer(): wide_data %&gt;% pivot_longer(!key_ID, names_to = &quot;name&quot;, values_to = &quot;value&quot;) ## # A tibble: 4,978 × 3 ## key_ID name value ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 female_1 0 ## 2 1 age_1 28 ## 3 1 female_2 1 ## 4 1 age_2 70 ## 5 1 female_3 1 ## 6 1 age_3 20 ## 7 1 female_4 NA ## 8 1 age_4 NA ## 9 1 female_5 NA ## 10 1 age_5 NA ## # ℹ 4,968 more rows This was easy since the syntax of pivot_longer() is the exact opposite of pivot_wider(), but the result is pretty useless: The name column contains two things: a variable name and a member_ID; The data is too long: I’d like age and female to be two separate variables ; and There’s many empty rows: there’s and age and female row for 19 possible members for each household, but most households are smaller than that. I could use separate_wider_delim(), pivot_wider(), and filter(!is.na()) to address those, but that’s not elegant at all. I can do all of this within the pivot_longer() call by using the names_to and names_sep options: wide_data %&gt;% rename_with(~ gsub(&quot;_&quot;, &quot;&quot;, .)) %&gt;% pivot_longer(!keyID, names_to = c(&quot;.value&quot;, &quot;member_ID&quot;), names_sep=&quot;_&quot;, values_drop_na = TRUE, names_transform = list(member_ID = as.integer)) ## # A tibble: 131 × 40 ## keyID member_ID female1 age1 female2 age2 female3 age3 female4 age4 ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 NA 0 28 1 70 1 20 NA NA ## 2 2 NA 1 33 0 8 0 28 1 81 ## 3 3 NA 1 51 0 11 1 56 1 76 ## 4 4 NA 0 43 1 1 0 83 1 24 ## 5 5 NA 0 66 0 31 0 12 1 36 ## 6 6 NA 1 30 1 71 1 69 NA NA ## 7 7 NA 1 51 1 15 1 56 0 28 ## 8 8 NA 0 84 0 38 0 82 1 11 ## 9 9 NA 0 31 1 24 1 76 0 38 ## 10 10 NA 0 46 1 70 1 86 1 37 ## # ℹ 121 more rows ## # ℹ 30 more variables: female5 &lt;int&gt;, age5 &lt;dbl&gt;, female6 &lt;int&gt;, age6 &lt;dbl&gt;, ## # female7 &lt;int&gt;, age7 &lt;dbl&gt;, female8 &lt;int&gt;, age8 &lt;dbl&gt;, female9 &lt;int&gt;, ## # age9 &lt;dbl&gt;, female10 &lt;int&gt;, age10 &lt;dbl&gt;, female11 &lt;int&gt;, age11 &lt;dbl&gt;, ## # female12 &lt;int&gt;, age12 &lt;dbl&gt;, female13 &lt;int&gt;, age13 &lt;dbl&gt;, female14 &lt;int&gt;, ## # age14 &lt;dbl&gt;, female15 &lt;int&gt;, age15 &lt;dbl&gt;, female16 &lt;int&gt;, age16 &lt;dbl&gt;, ## # female17 &lt;int&gt;, age17 &lt;dbl&gt;, female18 &lt;int&gt;, age18 &lt;dbl&gt;, female19 &lt;int&gt;, … In this case, the syntax is a bit harder to understand. It’s good to think first what the original data looks like, and how I intend to transform it. The wide data has columns key_ID, age_1-19 and female_1-19. I don’t really want to touch the key_ID column. I want to turn the columns age_1-19 and female_1-19 into three columns: female, age and member_ID. This translates to the options we passed to pivot_longer() as follows: !key_ID: We want to pivot the data that’s in all columns except key_ID. names_to = c(\".value\", \"member_ID\"): this specifies the new columns we want to create. It basically says that the existing column names consist of two parts: one part (i.e. female and age) that we wish to keep as column names of variables that will contain my values, and one part (i.e. the numbers 1-19) which should be put into a new column which we will “member_ID”. names_sep=: this indicates how the two parts mentioned above are separated. In more difficult cases, you’ll have to use the names_pattern option. This requires some knowledge of regular expressions, so here’s two examples: If there is no seperator (age1,female1 etc…): names_pattern = \"(.*\\\\D)([0-9]+)$\". In this regular expression, .*\\\\D matches a string of any length, of any characters, as long as it ends with something other than a digit. The [0-9]+$ matches any number of digits at the end of the string. The parentheses indicate how the string should be separated to form variable names and member_ID. If the separator is used in other places in variable names (member_age_1 etc…): names_pattern = \"(.*)_([0-9]+)$\". If there is no separator, or if the separator is used in other places in your variable names you’ll have to use thenames_pattern option. In this case names_pattern = \"(.*)_([0-9]+)$\" would work. values_drop_na = TRUE: tells R to drop rows that have missing data for all variables. This prevents the issue where we hadd too many rows. names_transform: by default, all name columns will be character types, but member_ID only contains integers, so we transform it to integer. This is completely optional. Joining (or merging) data Tidyverse has four functions to join (or merge, as Stata calls it) two data sets. The functions that differ in the way they treat observations that are in one data set but not the other. Consider the diagram below. It has two data sets, x (in Stata terms, this is the master data set) and y (the using data set in Stata terms). They have overlapping rows (area B), but also rows that are only in x (area A) or only in y (area C). The four join functions work as follows: inner_join(x,y) will only keep area B. left_join(x,y) will keep areas A and B. right_join(x,y) will keep areas B and C. full_join(x,y) will keep areas A, B, and C. In our case, the data sets match perfectly, i.e. we only have an area B, so there is no practical difference. I chose left_join() so the number of observations in my household survey is guaranteed to remain the same. To merge the roster to the household data, we use the join_by function: read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% left_join(wide_data) ## Rows: 131 Columns: 14 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (7): village, respondent_wall_type, memb_assoc, affect_conflicts, items... ## dbl (6): key_ID, no_membrs, years_liv, rooms, liv_count, no_meals ## dttm (1): interview_date ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## Joining with `by = join_by(key_ID)` ## # A tibble: 131 × 52 ## key_ID village interview_date no_membrs years_liv respondent_wall_type ## &lt;dbl&gt; &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 1 God 2016-11-17 00:00:00 3 4 muddaub ## 2 2 God 2016-11-17 00:00:00 7 9 muddaub ## 3 3 God 2016-11-17 00:00:00 10 15 burntbricks ## 4 4 God 2016-11-17 00:00:00 7 6 burntbricks ## 5 5 God 2016-11-17 00:00:00 7 40 burntbricks ## 6 6 God 2016-11-17 00:00:00 3 3 muddaub ## 7 7 God 2016-11-17 00:00:00 6 38 muddaub ## 8 8 Chirodzo 2016-11-16 00:00:00 12 70 burntbricks ## 9 9 Chirodzo 2016-11-16 00:00:00 8 6 burntbricks ## 10 10 Chirodzo 2016-12-16 00:00:00 12 23 burntbricks ## # ℹ 121 more rows ## # ℹ 46 more variables: rooms &lt;dbl&gt;, memb_assoc &lt;chr&gt;, affect_conflicts &lt;chr&gt;, ## # liv_count &lt;dbl&gt;, items_owned &lt;chr&gt;, no_meals &lt;dbl&gt;, months_lack_food &lt;chr&gt;, ## # instanceID &lt;chr&gt;, female_1 &lt;int&gt;, age_1 &lt;dbl&gt;, female_2 &lt;int&gt;, age_2 &lt;dbl&gt;, ## # female_3 &lt;int&gt;, age_3 &lt;dbl&gt;, female_4 &lt;int&gt;, age_4 &lt;dbl&gt;, female_5 &lt;int&gt;, ## # age_5 &lt;dbl&gt;, female_6 &lt;int&gt;, age_6 &lt;dbl&gt;, female_7 &lt;int&gt;, age_7 &lt;dbl&gt;, ## # female_8 &lt;int&gt;, age_8 &lt;dbl&gt;, female_9 &lt;int&gt;, age_9 &lt;dbl&gt;, … Note that we didn’t specify identifiers, like we would in Stata. R assumed that the variables that appear in both data frames are the identifiers, in this case key_ID. Use the by option to change this. Going the other way around, joining the household data to the roster data, is equally easy: long_data %&gt;% left_join( read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% select(key_ID,village,interview_date)) ## Rows: 131 Columns: 14 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (7): village, respondent_wall_type, memb_assoc, affect_conflicts, items... ## dbl (6): key_ID, no_membrs, years_liv, rooms, liv_count, no_meals ## dttm (1): interview_date ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## Joining with `by = join_by(key_ID)` ## # A tibble: 942 × 6 ## key_ID member_ID female age village interview_date ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dttm&gt; ## 1 1 1 0 28 God 2016-11-17 00:00:00 ## 2 1 2 1 70 God 2016-11-17 00:00:00 ## 3 1 3 1 20 God 2016-11-17 00:00:00 ## 4 2 1 1 33 God 2016-11-17 00:00:00 ## 5 2 2 0 8 God 2016-11-17 00:00:00 ## 6 2 3 0 28 God 2016-11-17 00:00:00 ## 7 2 4 1 81 God 2016-11-17 00:00:00 ## 8 2 5 0 49 God 2016-11-17 00:00:00 ## 9 2 6 1 6 God 2016-11-17 00:00:00 ## 10 2 7 0 68 God 2016-11-17 00:00:00 ## # ℹ 932 more rows Note that here I only merged in two variables, by using select and a pipe within the left_join() function. Summarizing over groups (or collapsing data) To compute summary statistics (sums, counts, means etc.) over a group, we use the group_by() and summarize() functions. For example, to compute the household size, number of women and average age in each household. But before doing anything, I make sure the -99s in the age variable are treated as missing, using a simple mutate() to conver them to NA. long_data %&gt;% group_by(key_ID) %&gt;% mutate(age = if_else(age == -99,NA,age)) %&gt;% summarize(hh_size = n(), num_women = sum(female), mean_age = mean(age, na.rm = TRUE)) ## # A tibble: 131 × 4 ## key_ID hh_size num_women mean_age ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 3 2 39.3 ## 2 2 7 3 39 ## 3 3 10 6 58.4 ## 4 4 7 4 35.9 ## 5 5 7 2 42 ## 6 6 3 3 56.7 ## 7 7 6 5 37.5 ## 8 8 12 7 50.4 ## 9 9 8 4 53.1 ## 10 10 12 9 46.2 ## # ℹ 121 more rows Row-wise Operations Suppose we wanted to run an operation over multiple variables. For example to get the household size, number of women and average age from our wide data. The easiest, and probably best, way to do this in R is by reshaping to long, and then use summarize, like we did above. But in Stata you would probably use some sort of egen function, so that may come natural. You can do similar things in R. It’s just a bit more complex than in Stata. across(): doing the same operations on multiple variables using across First, we need to make sure we update -99 to NA in all age_ variables. I use the across() function, which takes two arguments: a column specifcation (for which I use tidy select syntax), and a function: basically, the syntax is the same as in the mutate() step above, but with a tilde (~) in front of ifelse() and .x instead of the variable name. wide_data %&gt;% mutate(across(.cols = starts_with(&quot;age_&quot;), .fns = ~if_else(.x == -99,NA,.x))) ## # A tibble: 131 × 39 ## key_ID female_1 age_1 female_2 age_2 female_3 age_3 female_4 age_4 female_5 ## &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1 0 28 1 70 1 20 NA NA NA ## 2 2 1 33 0 8 0 28 1 81 0 ## 3 3 1 51 0 11 1 56 1 76 1 ## 4 4 0 43 1 1 0 83 1 24 1 ## 5 5 0 66 0 31 0 12 1 36 0 ## 6 6 1 30 1 71 1 69 NA NA NA ## 7 7 1 51 1 15 1 56 0 28 1 ## 8 8 0 84 0 38 0 82 1 11 1 ## 9 9 0 31 1 24 1 76 0 38 1 ## 10 10 0 46 1 70 1 86 1 37 1 ## # ℹ 121 more rows ## # ℹ 29 more variables: age_5 &lt;dbl&gt;, female_6 &lt;int&gt;, age_6 &lt;dbl&gt;, ## # female_7 &lt;int&gt;, age_7 &lt;dbl&gt;, female_8 &lt;int&gt;, age_8 &lt;dbl&gt;, female_9 &lt;int&gt;, ## # age_9 &lt;dbl&gt;, female_10 &lt;int&gt;, age_10 &lt;dbl&gt;, female_11 &lt;int&gt;, age_11 &lt;dbl&gt;, ## # female_12 &lt;int&gt;, age_12 &lt;dbl&gt;, female_13 &lt;int&gt;, age_13 &lt;dbl&gt;, ## # female_14 &lt;int&gt;, age_14 &lt;dbl&gt;, female_15 &lt;int&gt;, age_15 &lt;dbl&gt;, ## # female_16 &lt;int&gt;, age_16 &lt;dbl&gt;, female_17 &lt;int&gt;, age_17 &lt;dbl&gt;, … Notes: You can use across(.cols = where(is.numeric), .fn = ...) to apply a function to all numeric variables. You can also combine across() with summarize() to summarize multiple variables more easily. See the section on faceting for an example. c_across(): passing values from multiple variables to summarizing functions Then I have to pass all the female_ and age_ variables to sum() and mean(): wide_data %&gt;% mutate(across(.cols = starts_with(&quot;age_&quot;), .fn = ~if_else(.x == -99,NA,.x))) %&gt;% rowwise() %&gt;% mutate(mean_age = mean(c_across(starts_with(&quot;age_&quot;)), na.rm=TRUE), num_women = sum(c_across(starts_with(&quot;female_&quot;)), na.rm=TRUE), hh_size = sum(!is.na(c_across(starts_with(&quot;female_&quot;))))) %&gt;% select(key_ID,hh_size,num_women, mean_age) %&gt;% ungroup() ## # A tibble: 131 × 4 ## key_ID hh_size num_women mean_age ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 3 2 39.3 ## 2 2 7 3 39 ## 3 3 10 6 58.4 ## 4 4 7 4 35.9 ## 5 5 7 2 42 ## 6 6 3 3 56.7 ## 7 7 6 5 37.5 ## 8 8 12 7 50.4 ## 9 9 8 4 53.1 ## 10 10 12 9 46.2 ## # ℹ 121 more rows The key trick here is the combination of rowwise() and c_across(). rowwise() ensures all summaries are computed per row, and c_across() allows you to use tidy select syntax within the mean() and sum() functions. Splitting multi-response variable into dummies The SAFI data contains a number of columns that contain all responses selected in a multiple response questions. For example, the variables items_owned can contain something like \"bicycle;television;solar_panel;table\". We want to split this into dummies: one for each possible answers. There’s a number of ways to do this, but the most convenient is using sepate_longer() read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% separate_longer_delim(items_owned, delim = &quot;;&quot;) %&gt;% mutate(value = 1) %&gt;% pivot_wider(names_from = items_owned, values_from = value, names_glue = &quot;owns_{items_owned}&quot;, values_fill = 0) %&gt;% left_join(read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% select(key_ID,items_owned)) %&gt;% select(items_owned, starts_with(&quot;owns_&quot;)) %&gt;% head() ## # A tibble: 6 × 19 ## items_owned owns_bicycle owns_television owns_solar_panel owns_table ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 bicycle;television;s… 1 1 1 1 ## 2 cow_cart;bicycle;rad… 1 0 1 1 ## 3 solar_torch 0 0 0 0 ## 4 bicycle;radio;cow_pl… 1 0 1 0 ## 5 motorcyle;radio;cow_… 0 0 0 0 ## 6 &lt;NA&gt; 0 0 0 0 ## # ℹ 14 more variables: owns_cow_cart &lt;dbl&gt;, owns_radio &lt;dbl&gt;, ## # owns_cow_plough &lt;dbl&gt;, owns_solar_torch &lt;dbl&gt;, owns_mobile_phone &lt;dbl&gt;, ## # owns_motorcyle &lt;dbl&gt;, owns_NA &lt;dbl&gt;, owns_fridge &lt;dbl&gt;, ## # owns_electricity &lt;dbl&gt;, owns_sofa_set &lt;dbl&gt;, owns_lorry &lt;dbl&gt;, ## # owns_sterio &lt;dbl&gt;, owns_computer &lt;dbl&gt;, owns_car &lt;dbl&gt; Note that the original items_owned variable is lost during the separate_longer_delim() step, so I used left_join() to merge it back in for demonstration purposes. "],["reporting.html", "Estimating and reporting Generating some fake data Making a table of summary statistics Simple regression Robust standard errors", " Estimating and reporting This chapter uses a large number of packages, and the SAFI data set, so make sure all are downloaded by running the code from the Set-up section. I will create a table of descriptive statistics, and a simple regression table. Generating some fake data First we make a fake intervention aimed at improving fertilizer adoption. Adoption depends on the treatment and education and a random component. The page on DeclareDesign has more advanced techniques to generate fake data. library(tidyverse) library(here) rm(list=ls()) set.seed(1) data &lt;- read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% left_join({.} %&gt;% select(village) %&gt;% distinct(village) %&gt;% rowwise %&gt;% mutate(treatment = rbinom(1,1,0.5)))%&gt;% rowwise() %&gt;% mutate(educated = rbinom(1,1,0.3), u = sample(c(0.1,0.2,0.3),1), prob = 0.3 * treatment + 0.1 * educated + u, uses_fertilizer = rbinom(1,1,prob)) %&gt;% ungroup() %&gt;% select(-prob,-u) ## Rows: 131 Columns: 14 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (7): village, respondent_wall_type, memb_assoc, affect_conflicts, items... ## dbl (6): key_ID, no_membrs, years_liv, rooms, liv_count, no_meals ## dttm (1): interview_date ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## Joining with `by = join_by(village)` Making a table of summary statistics Using modelsummary and flextable The modelsummary package is the most convenient to create tables. To convert them to word, I use the flextable package. For a simple table of descriptive statistics, use the datasummary() function. I also define a vector with variable labels, which I use throughout this chapter. Below, I use it in the labelizor() function, which applies labels to a flextable object. I also apply the autofit() and fix_border_issues() functions to make the table look nicer. library(modelsummary) library(flextable) # vector for labelling variable names labels = c(no_membrs = &quot;# HH Members&quot;, years_liv = &quot;Year in village&quot;, rooms = &quot;# Rooms&quot;, liv_count = &quot;# Livestock&quot;, no_meals = &quot;# Meals&quot;, treatment = &quot;Treated&quot;, educated = &quot;Educated&quot;, uses_fertilizer = &quot;Uses fertilizer&quot;, `(Intercept)` = &quot;Constant&quot;) # descriptive stats data %&gt;% select(where(is.numeric), -ends_with(&quot;ID&quot;)) %&gt;% datasummary(All(.) ~ Mean + SD + min + max + Histogram , data = ., output = &quot;flextable&quot;) %&gt;% labelizor(j =1,labels = labels, part = &quot;all&quot;)%&gt;% fix_border_issues() %&gt;% autofit() .cl-7a1907d0{}.cl-7a12014c{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-7a153024{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7a154370{width:1.312in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a15437a{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a15437b{width:0.582in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a15437c{width:0.981in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a154384{width:1.312in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a154385{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a154386{width:0.582in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a154387{width:0.981in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a15438e{width:1.312in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a15438f{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a154390{width:0.582in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a154398{width:0.981in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a154399{width:1.312in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a15439a{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a15439b{width:0.582in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a1543a2{width:0.981in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} MeanSDminmaxHistogram# HH Members7.193.172.0019.00▂▅▇▂▃▂▁Year in village23.0516.911.0096.00▆▇▆▁▂▁# Rooms1.741.091.008.00▇▃▂# Livestock2.371.081.005.00▆▅▇▂# Meals2.600.492.003.00▅▇Treated0.370.490.001.00▇▄Educated0.300.460.001.00▇▃Uses fertilizer0.340.480.001.00▇▄ Flextables can be easily exported to Word using the save_as_docx() function. Balance Table Using modelsummary’s datasummary_balance() table function, it is easy to create a balance table: treat_labels &lt;- c(&quot;0&quot; = &quot;Control&quot;, &quot;1&quot; = &quot;Treated&quot;) # balance table data %&gt;% select(where(is.numeric), -ends_with(&quot;ID&quot;)) %&gt;% datasummary_balance( ~ treatment , data = ., output = &quot;flextable&quot;, stars = TRUE, dinm = TRUE, dinm_statistic = &quot;p.value&quot;) %&gt;% labelizor(j =1,labels = labels, part = &quot;all&quot;)%&gt;% labelizor(labels = treat_labels, part = &quot;header&quot;)%&gt;% fix_border_issues() %&gt;% autofit() .cl-7a5beb9a{}.cl-7a5606d0{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-7a585c0a{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7a586f7e{width:1.312in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586f88{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586f89{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586f92{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586f93{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586f94{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586f9c{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586f9d{width:1.312in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fa6{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fa7{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fa8{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fb0{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fb1{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fba{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fbb{width:1.312in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fbc{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fc4{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fc5{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fc6{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fce{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fcf{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fd8{width:1.312in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fd9{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fda{width:0.914in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fe2{width:0.71in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fe3{width:0.956in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fe4{width:1.219in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a586fec{width:0.667in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} ControlTreated MeanStd. Dev.Mean Std. Dev. Diff. in Meansp# HH Members7.02.97.63.60.60.320Year in village21.914.924.919.83.00.366# Rooms1.71.21.71.00.00.961# Livestock2.21.02.61.20.30.107# Meals2.60.52.60.50.00.594Educated0.30.50.30.50.00.873Uses fertilizer0.20.40.50.50.3**0.003 Advanced: Using only Flextable For more control, the flextable package can covert data frames into good-looking table using the tabulator() function. First, make a data frame with summary statistics. I duplicate the data set using bind_rows() to create an overall group. Then I use summarize(across(...)) to apply summarizing functions to a number of variables. summstats &lt;- bind_rows(data %&gt;% mutate(Treatment = ifelse(treatment, &quot; Treatment&quot;, &quot; Control&quot;)), data %&gt;% mutate(Treatment = &quot;Overall&quot;)) %&gt;% select(where(is.numeric),Treatment,-key_ID,-treatment) %&gt;% group_by(Treatment) %&gt;% summarize(across(.cols = everything(), .fns = list(n = ~sum(!is.na(.x)), nmiss = ~sum(is.na(.x)), mean = ~mean(.x,na.rm=TRUE), sd = ~sd(.x,na.rm=TRUE), min = ~min(.x,na.rm=TRUE), max = ~max(.x,na.rm=TRUE), iqr = ~IQR(.x,na.rm=TRUE)), .names = &quot;{.col}-{.fn}&quot;)) %&gt;% pivot_longer(cols = -Treatment, names_to = c(&quot;Variable&quot;,&quot;.value&quot;), names_sep=&quot;-&quot;) summstats ## # A tibble: 21 × 9 ## Treatment Variable n nmiss mean sd min max iqr ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 &quot; Control&quot; no_membrs 82 0 6.96 2.86 2 15 3.75 ## 2 &quot; Control&quot; years_liv 82 0 21.9 14.9 1 70 13.8 ## 3 &quot; Control&quot; rooms 82 0 1.74 1.17 1 8 1 ## 4 &quot; Control&quot; liv_count 82 0 2.24 1.01 1 4 2 ## 5 &quot; Control&quot; no_meals 82 0 2.59 0.496 2 3 1 ## 6 &quot; Control&quot; educated 82 0 0.293 0.458 0 1 1 ## 7 &quot; Control&quot; uses_fertilizer 82 0 0.244 0.432 0 1 0 ## 8 &quot; Treatment&quot; no_membrs 49 0 7.57 3.64 2 19 5 ## 9 &quot; Treatment&quot; years_liv 49 0 24.9 19.8 2 96 22 ## 10 &quot; Treatment&quot; rooms 49 0 1.73 0.953 1 4 1 ## # ℹ 11 more rows Then use I flextable’s tabulator() to make output that looks good in word. Note that tabulator() sorts the columns alphabetically, so that would be control, overall, treatment. That doesn’t make sense, so I have used spaces (\" Treatment\") to control the ordering. I’ve added a bunch of statistics to show the flexibility: library(flextable) summstats %&gt;% tabulator(rows = &quot;Variable&quot;, columns = &quot;Treatment&quot;, `N` = as_paragraph(as_chunk(n,digits=0)), `Mean (SD)` = as_paragraph(as_chunk(fmt_avg_dev(mean, sd, digit1=2,digit2 = 2))), Range = as_paragraph(as_chunk(min), &quot;-&quot;,as_chunk(max)) ) %&gt;% as_flextable() .cl-7a9b3a70{}.cl-7a9518b6{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-7a979046{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7a979050{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0;padding-top:0;padding-left:0;padding-right:0;line-height: 1;background-color:transparent;}.cl-7a979051{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7a97905a{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0;padding-top:0;padding-left:0;padding-right:0;line-height: 1;background-color:transparent;}.cl-7a97905b{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7a979064{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0;padding-top:0;padding-left:0;padding-right:0;line-height: 1;background-color:transparent;}.cl-7a97906e{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7a97a310{width:1.206in;background-color:transparent;vertical-align: bottom;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a31a{width:0.079in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a31b{width:0.434in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a31c{width:1.173in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a31d{width:0.824in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a324{width:0.519in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a325{width:1.206in;background-color:transparent;vertical-align: bottom;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a32e{width:0.079in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a32f{width:0.434in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.75pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a338{width:1.173in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.75pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a339{width:0.824in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.75pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a342{width:0.519in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.75pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a343{width:1.206in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a344{width:0.079in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a34c{width:0.434in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a34d{width:1.173in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a34e{width:0.824in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a34f{width:0.519in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a356{width:1.206in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a357{width:0.079in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a358{width:0.434in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a359{width:1.173in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a360{width:0.824in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7a97a361{width:0.519in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Variable Control TreatmentOverallNMean (SD)RangeNMean (SD)RangeNMean (SD)Rangeeducated820.29 (0.46)0.0-1.0490.31 (0.47)0.0-1.01310.30 (0.46)0.0-1.0liv_count822.24 (1.01)1.0-4.0492.57 (1.17)1.0-5.01312.37 (1.08)1.0-5.0no_meals822.59 (0.50)2.0-3.0492.63 (0.49)2.0-3.01312.60 (0.49)2.0-3.0no_membrs826.96 (2.86)2.0-15.0497.57 (3.64)2.0-19.01317.19 (3.17)2.0-19.0rooms821.74 (1.17)1.0-8.0491.73 (0.95)1.0-4.01311.74 (1.09)1.0-8.0uses_fertilizer820.24 (0.43)0.0-1.0490.51 (0.51)0.0-1.01310.34 (0.48)0.0-1.0years_liv8221.94 (14.92)1.0-70.04924.92 (19.83)2.0-96.013123.05 (16.91)1.0-96.0 To add a column with differences, I first define a function to compute the differences (I use a regression rather than a ttest, so I can cluster my standard errors etc. to this if I need to). Then I use summarize(across(...)) in much the same way as above, now to create a dataframe called difcol. get_diffs &lt;- function(var,by){ reg &lt;- lm(var ~ by) %&gt;% broom::tidy() coeff = round(reg[2,2],2) p &lt;- reg[2,5] stars = case_when(p &lt; 0.001 ~ &quot;***&quot;, p &lt; 0.01 ~ &quot;**&quot;, p &lt; 0.05 ~ &quot;*&quot;, .default = &quot;&quot; ) paste0(coeff,stars) } difcol &lt;- data %&gt;% select(where(is.numeric),-key_ID,treatment) %&gt;% summarize(across(.cols = c(everything(), -treatment), .fns = ~get_diffs(var = .x, by = treatment))) %&gt;% pivot_longer(cols =everything(), names_to = &quot;Variable&quot;, values_to=&quot;Difference&quot;) Then, all I have to do is add it to tabulator() using its datasup_last argument. Below, I also use a few other flextable function to make the table nicer. In particular, labelizor() to add variable labels, for which I use the named vector I defined above. descriptive_table_flex &lt;- summstats %&gt;% tabulator(rows = &quot;Variable&quot;, columns = &quot;Treatment&quot;, datasup_last = difcol, `N` = as_paragraph(as_chunk(n,digits=0)), `Mean (SD)` = as_paragraph(as_chunk(fmt_avg_dev(mean, sd, digit1=2,digit2 = 2)))) %&gt;% as_flextable() %&gt;% labelizor(j = &quot;Variable&quot;, labels = labels, part = &quot;all&quot;) %&gt;% fix_border_issues() %&gt;% autofit() descriptive_table_flex .cl-7ae13d54{}.cl-7adb165e{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-7add8088{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7add8092{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0;padding-top:0;padding-left:0;padding-right:0;line-height: 1;background-color:transparent;}.cl-7add8093{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7add809c{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0;padding-top:0;padding-left:0;padding-right:0;line-height: 1;background-color:transparent;}.cl-7add80a6{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7add80a7{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0;padding-top:0;padding-left:0;padding-right:0;line-height: 1;background-color:transparent;}.cl-7add80a8{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7add9370{width:1.312in;background-color:transparent;vertical-align: bottom;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add937a{width:0.1in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add937b{width:0.455in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add9384{width:1.194in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add9385{width:0.54in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add938e{width:0.981in;background-color:transparent;vertical-align: bottom;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add938f{width:1.312in;background-color:transparent;vertical-align: bottom;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add9390{width:0.1in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add9391{width:0.455in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.75pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add9398{width:1.194in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.75pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add9399{width:0.54in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.75pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add939a{width:0.981in;background-color:transparent;vertical-align: bottom;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.75pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add93a2{width:1.312in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add93a3{width:0.1in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add93ac{width:0.455in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add93ad{width:1.194in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add93ae{width:0.54in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add93b6{width:0.981in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add93b7{width:1.312in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add93c0{width:0.1in;background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add93c1{width:0.455in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add93ca{width:1.194in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add93cb{width:0.54in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7add93cc{width:0.981in;background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Variable Control TreatmentOverallDifferenceNMean (SD)NMean (SD)NMean (SD)Educated820.29 (0.46)490.31 (0.47)1310.30 (0.46)0.01# Livestock822.24 (1.01)492.57 (1.17)1312.37 (1.08)0.33# Meals822.59 (0.50)492.63 (0.49)1312.60 (0.49)0.05# HH Members826.96 (2.86)497.57 (3.64)1317.19 (3.17)0.61# Rooms821.74 (1.17)491.73 (0.95)1311.74 (1.09)-0.01Uses fertilizer820.24 (0.43)490.51 (0.51)1310.34 (0.48)0.27**Year in village8221.94 (14.92)4924.92 (19.83)13123.05 (16.91)2.98 Again, to save it as a word file, use save_as_docx(path = \"my/file.docx\"). Simple regression A simple regression uses the lm() function. I use the modelsummary() function to display it: lm &lt;- lm(uses_fertilizer ~ treatment + educated, data = data) modelsummary(lm, output = &quot;flextable&quot;) .cl-7b153352{}.cl-7b0fdc9a{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-7b121f78{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7b1230d0{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7b1230da{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7b1230db{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7b1230e4{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} (1)(Intercept)0.207(0.057)treatment0.265(0.083)educated0.128(0.088)Num.Obs.131R20.089R2 Adj.0.074AIC172.5BIC184.0Log.Lik.-82.241F6.230RMSE0.45 Robust standard errors To get robust standard errors clustered at the village level, using the same procedures Stata uses, I use lm_robust(): library(estimatr) lmrobust &lt;- lm_robust(uses_fertilizer ~ treatment + educated, data = data, clusters = village, se_type = &quot;stata&quot;) modelsummary(list(&quot;LM&quot; = lm, &quot;Robust&quot; = lmrobust), output = &quot;flextable&quot;) .cl-7b4f795e{}.cl-7b49061e{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-7b4c52a6{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7b4c6368{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7b4c6369{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7b4c6372{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7b4c6373{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} LMRobust(Intercept)0.2070.207(0.057)(0.068)treatment0.2650.265(0.083)(0.091)educated0.1280.128(0.088)(0.097)Num.Obs.131131R20.0890.089R2 Adj.0.0740.074AIC172.5172.5BIC184.0184.0Log.Lik.-82.241F6.230RMSE0.450.45Std.Errorsby: village I’d like to have just the N, r-squared and Adjusted R-squared: modelsummary(list(&quot;LM&quot; = lm, &quot;Robust&quot; = lmrobust), gof_map = c(&quot;nobs&quot;,&quot;r.squared&quot;,&quot;adj.r.squared&quot;), output = &quot;flextable&quot;) .cl-7b82ba94{}.cl-7b7d58d8{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-7b7fa2dc{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7b7fb470{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7b7fb47a{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7b7fb47b{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7b7fb484{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} LMRobust(Intercept)0.2070.207(0.057)(0.068)treatment0.2650.265(0.083)(0.091)educated0.1280.128(0.088)(0.097)Num.Obs.131131R20.0890.089R2 Adj.0.0740.074 If you want to add the number of clusters, you will need to do some work. modelsummary() gets the N etc. from the broom::glance() function. For lm_robust() models, this doesn’t report the number of clusters (even if the documentation says it does!). However, you can make sure that it does, by making a custom glance methods for lm_robust objects (see here for details on how to make use custom glance methods in modelsumary): glance_custom.lm_robust &lt;- function(x) { # this function takes glance() output, and adds a nclusters column glance(x) %&gt;% mutate(nclusters = x$nclusters) } modelsummary(list(&quot;LM&quot; = lm, &quot;Robust&quot; = lmrobust), gof_map = c(&quot;nobs&quot;,&quot;r.squared&quot;,&quot;adj.r.squared&quot;, &quot;nclusters&quot;), output = &quot;flextable&quot;) .cl-7bb860a4{}.cl-7bb1de1e{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-7bb52c86{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7bb53f78{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7bb53f82{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7bb53f83{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7bb53f8c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} LMRobust(Intercept)0.2070.207(0.057)(0.068)treatment0.2650.265(0.083)(0.091)educated0.1280.128(0.088)(0.097)Num.Obs.131131R20.0890.089R2 Adj.0.0740.074Num.Clust.3 Now lets add a probit model! probit &lt;- glm(uses_fertilizer ~ treatment + educated, family = binomial(link = &quot;probit&quot;), data = data) modelsummary(list(&quot;LM&quot; = lm, &quot;Robust&quot; = lmrobust, &quot;Probit&quot; = probit), gof_map = c(&quot;nobs&quot;,&quot;r.squared&quot;,&quot;adj.r.squared&quot;, &quot;nclusters&quot;), output = &quot;flextable&quot;) .cl-7bfa183c{}.cl-7bf4acda{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-7bf6f710{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7bf70962{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7bf7096c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7bf7096d{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7bf70976{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} LMRobustProbit(Intercept)0.2070.207-0.813(0.057)(0.068)(0.173)treatment0.2650.2650.727(0.083)(0.091)(0.236)educated0.1280.1280.366(0.088)(0.097)(0.250)Num.Obs.131131131R20.0890.089R2 Adj.0.0740.074Num.Clust.3 Adding cluster-robust standard errors to the probit model is a bit more complex. There is no glm_robust() function. However, you can create one, including tidy() and glance() methods that return the right statistics to modelsummary(): # this function estimates a probit model, and # then computes the cluster-robust standad errors using # sandwich and coeftest # it returns a glm_robust object, which is just a modified # coeftest object glm_robust &lt;- function(formula,family,data,cluster) { library(lmtest) library(sandwich) probit &lt;- glm(formula, family = family, data = data) # it&#39;s easier if the cluster is entered as a string, so # here I convert it to a formula cluster_formula &lt;- as.formula(paste0(&quot;~&quot;, cluster)) model &lt;- coeftest(probit, vcov = vcovBS(probit,cluster=cluster_formula)) class(model) &lt;- &quot;glm_robust&quot; # this computes the number of unique clusters in the data used # for the original mode attr(model,&quot;nclusters&quot;) &lt;- data[row.names(model.frame(probit)),cluster] %&gt;% unique() %&gt;% nrow() model } # this is the custom tidy methods for glm_robust objects # it returns a dataframe with coefficients tidy.glm_robust &lt;- function(x, ...){ x[,] %&gt;% as_tibble() %&gt;% mutate(term = attr(x,&quot;dimnames&quot;)[[1]]) %&gt;% select(term, estimate = Estimate, std.error = `Std. Error`, statistic = `z value`, p.value = `Pr(&gt;|z|)`) } # this is the glance method. It returns a data frame with # the number of obserations, log likelihood and number of clusters glance.glm_robust &lt;- function(x, ...){ tibble(nobs = attr(x,&quot;nobs&quot;), logLik = as.numeric(attr(x,&quot;logLik&quot;)), nclusters = attr(x,&quot;nclusters&quot;) ) } You can then simply use the glm_robust() function and modelsummary() will know how to handle its output! probitrobust &lt;- glm_robust(uses_fertilizer ~ treatment + educated, family = binomial(link = &quot;probit&quot;), data = data, cluster=&quot;village&quot;) ## Loading required package: zoo ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric modelsummary(list(&quot;LM&quot; = lm, &quot;LM Robust&quot; = lmrobust, &quot;Probit&quot; = probit, &quot;Probit Robust&quot; = probitrobust), gof_map = c(&quot;nobs&quot;,&quot;r.squared&quot;,&quot;adj.r.squared&quot;, &quot;nclusters&quot;), coef_map = labels, stars = TRUE, output = &quot;flextable&quot;) %&gt;% autofit() .cl-7c6f903a{}.cl-7c68a6c6{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-7c6b169a{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7c6b28ce{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b28d8{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b28e2{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b28e3{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b28ec{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b28ed{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b28f6{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b28f7{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2900{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2901{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b290a{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b290b{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2914{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2915{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2916{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2917{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b291e{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b291f{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2928{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2929{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2932{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2933{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b293c{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b293d{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2946{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2947{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2948{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2950{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2951{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2952{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b295a{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b295b{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b295c{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b295d{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2964{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2965{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b296e{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b296f{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2970{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2978{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2979{width:1.041in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2982{width:0.846in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b2983{width:1.024in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b298c{width:0.897in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7c6b298d{width:1.211in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} LMLM RobustProbitProbit RobustTreated0.265**0.265**0.727**0.727*(0.083)(0.091)(0.236)(0.294)Educated0.1280.1280.3660.366(0.088)(0.097)(0.250)(0.234)Constant0.207***0.207**-0.813***-0.813**(0.057)(0.068)(0.173)(0.254)Num.Obs.131131131131R20.0890.089R2 Adj.0.0740.074Num.Clust.33+ p &lt; 0.1, * p &lt; 0.05, ** p &lt; 0.01, *** p &lt; 0.001 "],["plotting.html", "Plotting using ggplot Introduction Data Prep Scatter plot Boxplot Bar chart Labels Faceting Stacked bar chart with WUR template and observation counts Ordering of labels Lollipop plot Maps", " Plotting using ggplot Introduction Each chart built with ggplot2 must include the following: - Data - Aesthetic mapping (aes) - Geometric objects (geom) Thus, the template for graphic in ggplot2 is: &lt;DATA&gt; %&gt;% ggplot(aes(&lt;MAPPINGS&gt;)) + &lt;GEOM_FUNCTION&gt;() Data Prep library(tidyverse) library(here) data &lt;- read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% separate_longer_delim(items_owned, delim = &quot;;&quot;) %&gt;% mutate(value = 1) %&gt;% pivot_wider(names_from = items_owned, values_from = value, names_glue = &quot;owns_{items_owned}&quot;, values_fill = 0) %&gt;% rowwise %&gt;% select(-&quot;owns_NA&quot;) %&gt;% mutate(number_items = sum(c_across(starts_with(&quot;owns_&quot;)))) Scatter plot A scatter plot uses geom_point() data %&gt;% ggplot(aes(x = no_membrs, y = number_items)) + geom_point() To differentiate overlapping points, you can use transparency… data %&gt;% ggplot(aes(x = no_membrs, y = number_items)) + geom_point(alpha = 0.3) …or add jitter: data %&gt;% ggplot(aes(x = no_membrs, y = number_items)) + geom_jitter() To add groups, add the variable that defines the groups as an aesthetic mapping, either in the call to ggplot(), or the one in the geom_() function you use: data %&gt;% ggplot(aes(x = no_membrs, y = number_items)) + geom_jitter(aes(color = village)) Boxplot data %&gt;% ggplot(aes(x = respondent_wall_type, y = rooms)) + geom_boxplot(alpha = 0) + geom_jitter(alpha = 0.3, color = &quot;tomato&quot;, width = 0.2, height = 0.2) Bar chart For a simple bar chart of counts: data %&gt;% ggplot(aes(x = respondent_wall_type)) + geom_bar(aes(fill = village)) And since stacked bar charts are not easy to read: data %&gt;% ggplot(aes(x = respondent_wall_type)) + geom_bar(aes(fill = village), position = &quot;dodge&quot;) Note that geom_bar() defaults to displaying counts. If you want something else, you can use the stat = option. stat = \"identity\" is especially useful, as it displays values as-is, allowing you to pre-process your data anyway you want, for example to get percentages: wall_plot &lt;- data %&gt;% filter(respondent_wall_type != &quot;cement&quot;) %&gt;% group_by(village, respondent_wall_type) %&gt;% summarize(n = n()) %&gt;% mutate(percent = (n / sum(n)) * 100) %&gt;% ungroup() %&gt;% ggplot(aes(x = village, y = percent, fill = respondent_wall_type)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) wall_plot Labels The labs() function changes labels, the scale_ family of functions change axes and legends: wall_plot + labs(title = &quot;Proportion of wall type by village&quot;, fill = &quot;Type of Wall in Home&quot;, x = &quot;Village&quot;, y = &quot;Percent&quot;) + scale_fill_discrete(labels=c(&#39;Burned briks&#39;, &#39;Mud Daub&#39;, &#39;Sun Bricks&#39;)) + scale_y_continuous(limits= c(0,100), n.breaks = 6) Faceting Faceting allows splitting a graph in multiple parts: data %&gt;% group_by(village) %&gt;% summarize(across(.cols = starts_with(&quot;owns_&quot;), .fns = ~sum(.x,na.rm=TRUE) / n() * 100, .names = &quot;{str_replace(.col, &#39;owns_&#39;, &#39;&#39;)}&quot;)) %&gt;% pivot_longer(-village, names_to = &quot;items&quot;, values_to = &quot;percent&quot;) %&gt;% ggplot(aes(x = village, y = percent)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) + facet_wrap(~ items) + theme_bw() + theme(panel.grid = element_blank()) Note that the .names argument to summarize(across()) is specified as a glue string that uses str_replace() to cut off the \"owns_\" bit of the column names. Stacked bar chart with WUR template and observation counts First, download the WUR template from here. Install it following the instruction on that page. Then we make a stacked bar chart using position = position_fill(). I use reverse = TRUE because I think the ordering doesn’t make sense in these horizontal plots. library(ggthemewur) data %&gt;% ggplot(aes(y = village, fill = respondent_wall_type)) + geom_bar(position = position_fill(reverse = TRUE)) + theme_wur() + scale_fill_wur_discrete() + scale_x_continuous(labels = scales::percent_format()) I like the percentages, but perhaps it’s good to know how many observations we have in each village. We can do this by changing the village names: data %&gt;% group_by(village) %&gt;% add_count() %&gt;% mutate(village = paste0(village,&quot; (n =&quot;,n,&quot;)&quot;)) %&gt;% ggplot(aes(y = village, fill = respondent_wall_type)) + geom_bar(position = position_fill(reverse = TRUE)) + theme_wur() + scale_fill_wur_discrete() + scale_x_continuous(labels = scales::percent_format()) You can also put the counts inside the plot: data %&gt;% ggplot(aes(y = village, fill = respondent_wall_type)) + geom_bar(position = position_fill(reverse = TRUE)) + theme_wur() + scale_fill_wur_discrete() + scale_x_continuous(labels = scales::percent_format()) + geom_text(stat = &quot;count&quot;, aes(label = after_stat(count)), position = position_fill(vjust = 0.5, reverse = TRUE), color = &quot;white&quot;) Or as percentages: data %&gt;% ggplot(aes(y = village, fill = respondent_wall_type)) + geom_bar(position = position_fill(reverse = TRUE)) + theme_wur() + scale_fill_wur_discrete() + scale_x_continuous(labels = scales::percent_format()) + geom_text(aes(label = after_stat(scales::percent(count / sum(count),accuracy=1))), stat = &quot;count&quot;, position = position_fill(vjust = 0.5, reverse = TRUE), color = &quot;white&quot;) Use functions to make all this code easier to use. Ordering of labels By default, ggplot will order categorical variables in your graph alphatically. With the wall types this was fine, but when the categories have an order, this doesn’t look good: data %&gt;% ggplot(aes(y = village, fill = affect_conflicts)) + geom_bar(position = position_fill(reverse = TRUE)) Here you’d expect the once category to be between more_once and never, not at the end. To fix this, convert the variable to a factor. The order in the levels argument will be the order in which the labels will be displayed: data %&gt;% mutate(affect_conflicts = factor(affect_conflicts, levels = c(&quot;frequently&quot;, &quot;more_once&quot;, &quot;once&quot;, &quot;never&quot;))) %&gt;% ggplot(aes(y = village, fill = affect_conflicts)) + geom_bar(position = position_fill(reverse = TRUE)) Note that the trick of adding group counts to string variables using add_count() doesn’t work with factors. Or rather, it works, but converts the factor back to a string. In the functions chapter, I define a function called count_label() that adds group counts to factor variables using black magic. Lollipop plot A lollipop plot is a nice alternative to a bar chart. Here is an example. It uses reorder to put the longest lollipops are at the top, and and the brewur() function to select four colors from the WUR theme. N = nrow(data) read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% separate_longer_delim(items_owned, delim = &quot;;&quot;) %&gt;% select(items_owned) %&gt;% filter(!is.na(items_owned)) %&gt;% group_by(items_owned) %&gt;% summarize(Count = n() / N) %&gt;% mutate(items_owned = reorder(items_owned, Count)) %&gt;% ggplot(aes(x = Count, y = items_owned)) + geom_linerange(aes(y = items_owned, xmin = 0, xmax = Count), color = &quot;gray&quot;) + geom_point(aes(x = Count, y = items_owned), size = 4, position = position_dodge(width = 0.5), color = brewur()[[1]]) + theme_wur() + scale_x_continuous(labels = scales::percent_format()) You can of course also group things, but this may mess up the ordering. Here I use complete to make sure that 0s ae properly displayed. The trick is to use position = position_dodge(width = 0.5). I use scale_color_manual() to set the colors to the first four WUR colors. read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% separate_longer_delim(items_owned, delim = &quot;;&quot;) %&gt;% select(village, items_owned) %&gt;% filter(!is.na(items_owned)) %&gt;% group_by(village, items_owned) %&gt;% summarize(Count = n()) %&gt;% ungroup() %&gt;% complete(village, items_owned, fill = list(Count = 0)) %&gt;% group_by(village) %&gt;% mutate(n = sum(Count)) %&gt;% ungroup() %&gt;% mutate(Percent = Count / n) %&gt;% mutate(items_owned = reorder(items_owned, Percent)) %&gt;% ggplot(aes(x = Percent, y = items_owned, group = village)) + geom_linerange(aes(y = items_owned, xmin = 0, xmax = Percent), position = position_dodge(width = 1), color = &quot;gray&quot;) + geom_point(aes(x = Percent, y = items_owned, color = village), size = 4, position = position_dodge(width = 1)) + scale_color_manual(values = brewur()[1:4]) + theme_wur() + scale_x_continuous(labels = scales::percent_format()) This graph is very crowded, so probably would need some changes. Perhaps facetting would have been better here, or you could manually tweak the y-values to create some whitespace. Maps For maps, we use the sf package, and a sample data set, in geo-json format (but sf can use all sorts of shapefiles). library(sf) file &lt;- &quot;https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json&quot; shapefile &lt;- st_read(file) ## Reading layer `countries.geo&#39; from data source ## `https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json&#39; ## using driver `GeoJSON&#39; ## Simple feature collection with 180 features and 2 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -180 ymin: -85.60904 xmax: 180 ymax: 83.64513 ## Geodetic CRS: WGS 84 shapefile ## Simple feature collection with 180 features and 2 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -180 ymin: -85.60904 xmax: 180 ymax: 83.64513 ## Geodetic CRS: WGS 84 ## First 10 features: ## id name geometry ## 1 AFG Afghanistan MULTIPOLYGON (((61.21082 35... ## 2 AGO Angola MULTIPOLYGON (((16.32653 -5... ## 3 ALB Albania MULTIPOLYGON (((20.59025 41... ## 4 ARE United Arab Emirates MULTIPOLYGON (((51.57952 24... ## 5 ARG Argentina MULTIPOLYGON (((-65.5 -55.2... ## 6 ARM Armenia MULTIPOLYGON (((43.58275 41... ## 7 ATA Antarctica MULTIPOLYGON (((-59.57209 -... ## 8 ATF French Southern and Antarctic Lands MULTIPOLYGON (((68.935 -48.... ## 9 AUS Australia MULTIPOLYGON (((145.398 -40... ## 10 AUT Austria MULTIPOLYGON (((16.97967 48... You can use ggplot() and geom_sf() to make a map: shapefile %&gt;% ggplot() + geom_sf() You can use the shapefile as a regular data file, using any old data wrangling functions on it. shapefile_updated &lt;- shapefile %&gt;% mutate(x = rnorm(n = nrow(.))) shapefile_updated ## Simple feature collection with 180 features and 3 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -180 ymin: -85.60904 xmax: 180 ymax: 83.64513 ## Geodetic CRS: WGS 84 ## First 10 features: ## id name geometry ## 1 AFG Afghanistan MULTIPOLYGON (((61.21082 35... ## 2 AGO Angola MULTIPOLYGON (((16.32653 -5... ## 3 ALB Albania MULTIPOLYGON (((20.59025 41... ## 4 ARE United Arab Emirates MULTIPOLYGON (((51.57952 24... ## 5 ARG Argentina MULTIPOLYGON (((-65.5 -55.2... ## 6 ARM Armenia MULTIPOLYGON (((43.58275 41... ## 7 ATA Antarctica MULTIPOLYGON (((-59.57209 -... ## 8 ATF French Southern and Antarctic Lands MULTIPOLYGON (((68.935 -48.... ## 9 AUS Australia MULTIPOLYGON (((145.398 -40... ## 10 AUT Austria MULTIPOLYGON (((16.97967 48... ## x ## 1 0.66728807 ## 2 -1.29076969 ## 3 -2.03500354 ## 4 2.02134699 ## 5 1.00597349 ## 6 0.81712360 ## 7 -0.66398828 ## 8 -0.01128123 ## 9 0.61967726 ## 10 -1.28123874 You can use the fill aesthetic to color your shapefile: shapefile_updated %&gt;% ggplot(aes(fill = x)) + geom_sf(colour = NA) + # removes borders theme_void() # removes grid You can also make an interactive map, which you can use in html documents created with rmarkdown, or in shiny applications. It uses a palette I created using the colorBin() function. library(leaflet) pallete &lt;- colorBin( palette = &quot;YlOrBr&quot;, domain = shapefile_updated$x, na.color = &quot;transparent&quot;, bins = 5 ) shapefile %&gt;% mutate(x = rnorm(n = nrow(.))) %&gt;% leaflet() %&gt;% addTiles() %&gt;% addPolygons(fillColor = ~pallete(x), stroke = TRUE, fillOpacity = 0.9, color = &quot;white&quot;, weight = 0.3) %&gt;% addLegend(pal = pallete, values = ~x, opacity = 0.9, title = &quot;Look at these pretty colours&quot;, position = &quot;bottomleft&quot;) "],["declaredesign.html", "Power Analysis using DeclareDesign Diff-in-Diff", " Power Analysis using DeclareDesign DeclareDesign is a system to simulate Research Designs. This is useful for power analysis, because it is often hard to include things like clustering and covariates in standard power calculators. Resources for learning about DeclareDesign: Slides by the authors of DeclareDesign: Graeme Blair, Alex Coppock, Macartan Humphreys The DeclareDesign CheatSheet The book Research Design in the Social Sciences: Declaration, Diagnosis, and Redesign Read at least the slides before going forward! Diff-in-Diff Here’s a common situation: I’ve collected some baseline data, and are wondering if our study has sufficient power to pick up expected treatment effects. I will start off with some fake baseline data, which only contains y0, our outcome indicator. We use the fabricate() function, from the fabricatr library, which is loaded with DeclareDesign: # start with a clean environment rm(list=ls()) # load packages library(tidyverse) # data management library(fixest) # for estimation of fixed effects library(lmtest) # for computing standard errors library(sandwich) # provides the functions for lmtest to compute robust SEs library(DeclareDesign) # for power calculation library(broom) # to extract coefficients from model output # set seed for reproducibility set.seed(1) N = 100 fake_data &lt;- fabricate(N = N, y0 = runif(N, 100, 150)) fake_data %&gt;% as_tibble() ## # A tibble: 100 × 2 ## ID y0 ## &lt;chr&gt; &lt;dbl&gt; ## 1 001 113. ## 2 002 119. ## 3 003 129. ## 4 004 145. ## 5 005 110. ## 6 006 145. ## 7 007 147. ## 8 008 133. ## 9 009 131. ## 10 010 103. ## # ℹ 90 more rows Now, let’s add an extra year to our data, again using fabricate(), just to demonstrate how, using add_level() and then crosslevels(): fakedata_years &lt;- fabricate(fake_data, years = add_level(N = 2, t = as.numeric(years) - 1, nest=FALSE), observations = cross_levels(by = join_using(ID, years))) fakedata_years %&gt;% as_tibble() ## # A tibble: 200 × 5 ## ID y0 years t observations ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 001 113. 1 0 001 ## 2 002 119. 1 0 002 ## 3 003 129. 1 0 003 ## 4 004 145. 1 0 004 ## 5 005 110. 1 0 005 ## 6 006 145. 1 0 006 ## 7 007 147. 1 0 007 ## 8 008 133. 1 0 008 ## 9 009 131. 1 0 009 ## 10 010 103. 1 0 010 ## # ℹ 190 more rows Now it’s time to start declaring our design. The first element of the design is the model, which essentially is my data, and I declare it using the same synytax as fabricate() above. This means you can input existing data, but also generate random new variables. The potential outcomes are generated using potential_outcomes(). This will create two variables Y_Z_1 and Y_Z_0, which are the potential outcomes if having received treatment (Z == 1) or not. Note that I will generate Z in the next step. You can see I have created a very simple data generating process to generate different outcomes in t = 1 for treatment and control, but you can go absolutely wild here to check the assumptions you have: you can cluster the outcomes, include compliance or treatment effectiveness, add more or less noise, make it depend on both observable and unobservable characteristics, etc. etc. year_shock &lt;- 10 effect_size &lt;- 15 stdev &lt;- 5 model &lt;- declare_model(fakedata_years, potential_outcomes(Y ~ y0 + t * year_shock + Z * effect_size + t * rnorm(N,sd = stdev))) Then it’s time to think about assignment. I need to assign treatment, and reveal the outcomes based on treatment assignment. Here I create two variables for treatment so I can toy around with different model specifications later on. The first variable is the treatment_group, to indicate which households get the treatment. For this I use the cluster_ra() because I have two observations per household, so households can be thought of as a cluster. The other is Z, an indicator for actually having received the treatment (equivalent to Z = treatment_group * t). If treatment had already been known during baseline (not unlikely) then we would have only had to reveal the outcomes: assignment &lt;- declare_assignment(treatment_group = cluster_ra(clusters = ID, prob = 0.5), Z = ifelse(treatment_group == 1 &amp; t == 1,1,0), Y = reveal_outcomes(Y ~ Z)) Next, I declare my theoretical quantity of interest is the treatment effect in year 1. This is useful to check for bias. This is not really needed here, since my model will follow our data generation process exactly, so I could have just skipped this step. inquiry &lt;- declare_inquiry(ATE = mean(Y_Z_1 - Y_Z_0), subset = (t == 1)) And finally, I add three estimators. If I hadn’t declared an inquiry, I could have declared a test here using declare_test(), which has the same syntax. The first estimator uses lm_robust(), which is included with DeclareDesign, to estimate a simple linear model using standard DiD notation. estimator1 &lt;- declare_estimator(Y ~ t * treatment_group, inquiry = &quot;ATE&quot;, .method = estimatr::lm_robust, term = &quot;t:treatment_group&quot;, label = &quot;LM&quot;) Then I use feols() from the fixest package to estimate a Two-way fixed effects (2FE) model. This is equivalent to the model above for this case, but the 2FE can be more easily extended to more complex designs (but beware!). library(fixest) library(broom) estimator2 &lt;- declare_estimator(Y ~ Z | treatment_group + t, vcov = &quot;hetero&quot;, .method = feols, term = &quot;Z&quot;, inquiry = &quot;ATE&quot;, label = &quot;2FE&quot;) As third estimator, I use a custom estimation function. The function takes an equation, the data to be analyzed, and (optionally) the type of standard errors to compute, and as its output it returns a tidy dataset containing estimated coefficients created by broom::tidy(). As long as you make sure the data can go into your custom function (using an argument called data), and it returns something that looks like what broom::tidy() would return, there’s no limit as to how complex you can make your analysis. Here, I keep it (relatively) simple. I use the lmtest/sandwich way of estimating robust standard errors, and make sure you can easily change the equation and type of Standard Errors to use through a parameter. library(lmtest) library(sandwich) custom_robust &lt;- function(equation, data, type=&quot;HC1&quot;){ # function takes a formula, provided as the first argument # of declare_estimator... # .. a type of standard errors to pass to vcov (default is HC1) # ... and data # It outputs a tidy data frame with relevant coefficients. lm(equation, data = data) %&gt;% coeftest(., vcov = vcovHC(., type=type)) %&gt;% broom::tidy(conf.int=TRUE) %&gt;% mutate(outcome = &quot;Y&quot;) %&gt;% filter(term == &quot;t:treatment_group&quot;) } # the arguments formula and type are passed to to custom_robust() # as is the data on which to run the estimator. estimator3 &lt;- declare_estimator(equation = Y ~ t * treatment_group, handler = label_estimator(custom_robust), inquiry = &quot;ATE&quot;, label = &quot;Custom&quot;) Finally, I combine all these elements to declare my design. Note that it’s only here that R starts actually running the code to randomize things. The previous was just declaration! design &lt;- model + assignment + inquiry + estimator1 + estimator2 + estimator3 summary(design) ## ## Research design declaration summary ## ## Step 1 (model): declare_model(fakedata_years, potential_outcomes(Y ~ y0 + t * year_shock + Z * effect_size + t * rnorm(N, sd = stdev))) ## ## N = 200 ## ## Added variable: ID ## N_missing N_unique class ## 0 100 character ## ## Added variable: y0 ## min median mean max sd N_missing N_unique ## 100.67 124.39 125.89 149.6 13.35 0 100 ## ## Added variable: years ## 1 2 ## 100 100 ## 0.50 0.50 ## ## Added variable: t ## 0 1 ## 100 100 ## 0.50 0.50 ## ## Added variable: observations ## N_missing N_unique class ## 0 200 character ## ## Added variable: Y_Z_0 ## min median mean max sd N_missing N_unique ## 100.67 132.43 130.95 160.63 14.16 0 200 ## ## Added variable: Y_Z_1 ## min median mean max sd N_missing N_unique ## 115.67 146.79 145.69 176.27 14.24 0 200 ## ## Step 2 (assignment): declare_assignment(treatment_group = cluster_ra(clusters = ID, prob = 0.5), Z = ifelse(treatment_group == 1 &amp; t == 1, 1, 0), Y = reveal_outcomes(Y ~ Z)) ## ## Added variable: treatment_group ## 0 1 ## 100 100 ## 0.50 0.50 ## ## Added variable: Z ## 0 1 ## 150 50 ## 0.75 0.25 ## ## Added variable: Y ## min median mean max sd N_missing N_unique ## 100.67 134.88 134.68 176.27 17.03 0 200 ## ## Step 3 (inquiry): declare_inquiry(ATE = mean(Y_Z_1 - Y_Z_0), subset = (t == 1)) ## ## A single draw of the inquiry: ## inquiry estimand ## ATE 14.47179 ## ## Step 4 (estimator): declare_estimator(Y ~ t * treatment_group, inquiry = &quot;ATE&quot;, .method = estimatr::lm_robust, term = &quot;t:treatment_group&quot;, label = &quot;LM&quot;) ## ## Formula: Y ~ t * treatment_group ## ## Method: :: Method: estimatr Method: lm_robust ## ## A single draw of the estimator: ## term estimator estimate std.error statistic p.value conf.low ## t:treatment_group LM 15.68729 3.867435 4.056252 7.194547e-05 8.060161 ## conf.high df outcome inquiry ## 23.31442 196 Y ATE ## ## Step 5 (estimator): declare_estimator(Y ~ Z | treatment_group + t, vcov = &quot;hetero&quot;, .method = feols, term = &quot;Z&quot;, inquiry = &quot;ATE&quot;, label = &quot;2FE&quot;) ## ## Formula: Y ~ Z | treatment_group + t ## ## Method: feols ## ## A single draw of the estimator: ## term estimator estimate std.error statistic p.value conf.low conf.high ## Z 2FE 15.68729 3.867435 4.056252 7.194547e-05 8.060161 23.31442 ## inquiry ## ATE ## ## Step 6 (estimator): declare_estimator(equation = Y ~ t * treatment_group, inquiry = &quot;ATE&quot;, handler = label_estimator(custom_robust), label = &quot;Custom&quot;) ## ## Formula: Y ~ t * treatment_group ## ## A single draw of the estimator: ## estimator term estimate std.error statistic p.value conf.low ## Custom t:treatment_group 15.68729 3.867435 4.056252 7.194547e-05 8.060161 ## conf.high outcome inquiry ## 23.31442 Y ATE Note that the results of my three estimators are identical, which is as expected. If you want to browse a version of the data created by your design, use the draw_data() function. This is useful to examine the properties of the data. draw_data(design) %&gt;% as_tibble() ## # A tibble: 200 × 10 ## ID y0 years t observations Y_Z_0 Y_Z_1 treatment_group Z Y ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 001 113. 1 0 001 113. 128. 1 0 113. ## 2 002 119. 1 0 002 119. 134. 1 0 119. ## 3 003 129. 1 0 003 129. 144. 0 0 129. ## 4 004 145. 1 0 004 145. 160. 0 0 145. ## 5 005 110. 1 0 005 110. 125. 0 0 110. ## 6 006 145. 1 0 006 145. 160. 1 0 145. ## 7 007 147. 1 0 007 147. 162. 1 0 147. ## 8 008 133. 1 0 008 133. 148. 0 0 133. ## 9 009 131. 1 0 009 131. 146. 1 0 131. ## 10 010 103. 1 0 010 103. 118. 0 0 103. ## # ℹ 190 more rows Now to calculate our power. The diagnose_design() will run our model 500 times and our power is simply the fraction of times we find a statistically significant effect. diagnose_design(design) ## ## Research design diagnosis based on 500 simulations. Diagnosis completed in 16 secs. Diagnosand estimates with bootstrapped standard errors in parentheses (100 replicates). ## ## Design Inquiry Estimator Outcome Term N Sims Mean Estimand ## design ATE 2FE &lt;NA&gt; Z 500 14.97 ## (0.03) ## design ATE Custom Y t:treatment_group 500 14.97 ## (0.03) ## design ATE LM Y t:treatment_group 500 14.97 ## (0.03) ## Mean Estimate Bias SD Estimate RMSE Power Coverage ## 15.02 0.05 1.04 0.70 1.00 1.00 ## (0.05) (0.04) (0.03) (0.02) (0.00) (0.00) ## 15.02 0.05 1.04 0.70 1.00 1.00 ## (0.05) (0.04) (0.03) (0.02) (0.00) (0.00) ## 15.02 0.05 1.04 0.70 1.00 1.00 ## (0.05) (0.04) (0.03) (0.02) (0.00) (0.00) Looks good! (Except for some NAs for the 2FE model: this is due to the summary function not providing all things needed. To fix this, I could have created my own summary or handler function, but it doesn’t really affect anything, so this is good enough.) But what if I was too optimistic? Using the redesign() function, you can vary various parameters of your design, and test all their combinations. Here I check a few plausible values for the stdev variable (giving the variation of the error term for incomes in year 1) and the expected effect size. Note that by default, this runs all estimators, 500 times for each combination of the parameters. This takes a lot of time, so I update my design to have only one estimator (estimator1, which is fast) and I’ve set the sims option of diagnose_design() to 100. design &lt;- model + assignment + inquiry + estimator1 diagnosis &lt;- design %&gt;% redesign(effect_size = 7:11, stdev = c(3,5,7)) %&gt;% diagnose_design(sims = 100) Now, I want a nice plot. For this I use the tidy() function to convert the output to a data frame, which - after some filtering - I pipe into ggplot(). It’s now easy to see that I should be able to pick up an effect size of 10 in most cases. diagnosis %&gt;% tidy() %&gt;% filter(diagnosand == &quot;power&quot;) %&gt;% select(effect_size,stdev,power = estimate) %&gt;% mutate(stdev = factor(stdev)) %&gt;% ggplot(aes(x = effect_size, y = power, shape = stdev, color=stdev)) + geom_line() + geom_point() + geom_hline(yintercept=0.8,linetype=2) + scale_x_continuous(breaks=seq(7,11,2)) "],["data-exploration.html", "Data Exploration Setup Making a codebook from a Stata .dta Correlogram", " Data Exploration The first step of using data is exploring it. I will use Stata data because it has labels, making it easy to get a sense of the data once you get the hang of how labels are dealt with in R. Setup Download the cars data set from here or run the code below: download.file( &quot;https://raw.githubusercontent.com/kleuveld/r_cheatsheet/main/data/cars.dta&quot;, here(&quot;data/cars.dta&quot;), mode = &quot;wb&quot; ) Making a codebook from a Stata .dta In Stata variables have labels, which is great because they’re more informative than variable names. In R, it can be a bit tricky to access the labels of imported dta’s, but making a code book isn’t that hard. First, load the cars data set: library(tidyverse) library(haven) library(here) cars &lt;- read_dta(here(&quot;data/cars.dta&quot;)) The variable labels are stored as attributes of the variables. The attributes() function returns all attributes: attributes(cars$mpg) ## $label ## [1] &quot;miles per gallon&quot; ## ## $format.stata ## [1] &quot;%9.0g&quot; To see only the label use: attributes(cars$mpg)$label ## [1] &quot;miles per gallon&quot; To create a data frame with all variable labels we can apply attributes() to all variables using map_chr() from the purrr package: codebook &lt;- tibble(var = colnames(cars), label = map_chr(cars,~attributes(.x)$label)) codebook ## # A tibble: 4 × 2 ## var label ## &lt;chr&gt; &lt;chr&gt; ## 1 mpg miles per gallon ## 2 cyl number of cylinders ## 3 eng engine displacement in cubic inches ## 4 wgt vehicle weight in pounds To make it slightly more useful, we can add some summary statistics. I can apply a number of functions to a data frame using map_dbl(), which returns a named vector: list_of_functions &lt;- list(mean=mean,sd=sd,min=min,max=max) list_of_functions %&gt;% map_dbl(~.x(cars$mpg, na.rm = TRUE)) ## mean sd min max ## 23.445918 7.805007 9.000000 46.599998 To do this for every column in a dataframe, I wrap the code above in a function, and use map() to apply that function to the columns. stats_to_tibble &lt;- function(var,funs) { funs %&gt;% map_dbl(~ifelse(is.numeric(var),.x(var,na.rm = TRUE),NA)) %&gt;% as_tibble_row() } summ_stats &lt;- cars %&gt;% map(~stats_to_tibble(.x,list_of_functions)) %&gt;% list_rbind() summ_stats ## # A tibble: 4 × 4 ## mean sd min max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 23.4 7.81 9 46.6 ## 2 5.47 1.71 3 8 ## 3 194. 105. 68 455 ## 4 2978. 849. 1613 5140 I can bind that with the codebook I had before to get a nice overview of all the variables in my dataset: bind_cols(codebook, summ_stats) ## # A tibble: 4 × 6 ## var label mean sd min max ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 mpg miles per gallon 23.4 7.81 9 46.6 ## 2 cyl number of cylinders 5.47 1.71 3 8 ## 3 eng engine displacement in cubic inches 194. 105. 68 455 ## 4 wgt vehicle weight in pounds 2978. 849. 1613 5140 Here’s a re-usable function that add more columns, handles empty labels (using coalesce()) and rounds the output so it’s human-readable: create_codebook &lt;- function(.df,stats = list(mean=mean,sd=sd,min=min,max=max, prop_miss=prop_miss)) { labels &lt;- tibble(var = colnames(.df), label = map_chr(.df,function(x) coalesce(attributes(x)$label,&quot;&quot;)), type = map_chr(.df, typeof)) prop_miss &lt;- function(x,na.rm = TRUE) { mean(is.na(x)) } stats_to_tibble &lt;- function(var,stats) { map_dbl(stats,~ifelse(is.numeric(var),.x(var,na.rm = TRUE),NA)) %&gt;% as_tibble_row() } sumstats &lt;- .df %&gt;% map(~stats_to_tibble(.x,stats)) %&gt;% list_rbind() %&gt;% mutate(across(where(is.numeric), ~round(.x,2))) bind_cols(labels,sumstats) } create_codebook(cars) ## # A tibble: 4 × 8 ## var label type mean sd min max prop_miss ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 mpg miles per gallon doub… 2.35e1 7.81 9 46.6 0 ## 2 cyl number of cylinders doub… 5.47e0 1.71 3 8 0 ## 3 eng engine displacement in cubic… doub… 1.94e2 105. 68 455 0 ## 4 wgt vehicle weight in pounds doub… 2.98e3 849. 1613 5140 0 Correlogram Another great data exploration tool is the correlogram, which displays the correlations between many variables. To create one, I use ggpairs() from the GGally package: library(GGally) ggpairs(cars) You can also split the correlogram by a variable, like I do with the number of cylinders below: cars %&gt;% ggpairs(columns = c(1,3,4), ggplot2::aes(colour=factor(cyl))) "],["programming.html", "Programming with R Loops Functions Map()", " Programming with R You can improve your R code by using programming features such as loops and functions to make your code reusable. This prevents errors, while saving you time. Loops Loops repeat code a number of time, they have the following structure: for (i in 1:4){ print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 The i is the iterator, and each iteration of the loop it takes on the value of a different element of the object that follows the in; in this case, i takes on 1,2,3 and finally 4 as its values. Therefore, this code is equivalent to: print(1) ## [1] 1 print(2) ## [1] 2 print(3) ## [1] 3 print(4) ## [1] 4 But it’s much easier to maintain! Imagine having to do 86 iterations: you would need to copy paste the code 85 times every time you want to update something. Using loops, you don’t need to copy-paste a thing, leading to fewer errors. While loops can be a perfectly fine way of doing repeated work, most R programmers prefer not to use loops, but instead use functions such as lapply() and map(). However, for this you will need to know functions. Functions Basic Functions A function is an R object that’s essentially a shortcut to run a bit of code. Usually, a function takes an argument (the input), and returns an output. The argument is always provided within parentheses. The sqrt() function, for example, takes a number as its argument and returns the square root. sqrt(4) ## [1] 2 The beauty of functions is that they allow you to define a set of operations in one place, and re-use it as often as you want. If you then need to update the operations, all you need to do is update the function, instead of hunting down every instance of the operations throughout your script. Take for example the following code that cleans missing data. #define an example variable variable1 = c(1,2,3,-99,5,6) #change missing variable1_cleaned = if_else(variable1 == -99, NA,variable1) variable1_cleaned ## [1] 1 2 3 NA 5 6 This works, but I need to do this at many different places in my code, and when copying the code to other places, it’s easy to make small mistakes. Moreover, if I notice my procedure for cleaning missing data is wrong, I will have to hunt down all the places I’ve copied this code to, and change it (which, again, is an error prone process). A common piece of advice is to put any code that you have to copy-paste more than twice in a function. Once I do that, I can just call the function wherever I need to clean data; if I want to change how I deal with missings, I now only have to make changes in one place: clean_missing &lt;- function(input_data) { returned_data &lt;- if_else(input_data == -99, NA, input_data) return(returned_data) } I’ve pretty much copied the code I had above. Note that I could have used any name for my argument (defined in the parentheses after function); I just thought input_data made sense. I use the return() function to return data. I can now just use the clean_data() wherever I want: variable1_cleaned &lt;- clean_missing(variable1) variable1_cleaned ## [1] 1 2 3 NA 5 6 Note that any variables we created in the function are kept within the function, and you can’t access them later: variable1_clean &lt;- clean_missing(variable1) returned_data ## Error in eval(expr, envir, enclos): object &#39;returned_data&#39; not found This keeps your working environment nice and clean, which again prevents problems. Above I used the return function. This is not needed. Anything on the last line of the function that would normally be returned to the console, is used a return value of the function: clean_missing &lt;- function(input_data) { if_else(input_data == -99, NA, input_data) } clean_missing(variable1) ## [1] 1 2 3 NA 5 6 Functions and the tidyverse In the previous function I passed a vector to clean, what if want to use it in a data cleaning pipe? It’s useful to start with the code without a function, and then to generalize from there: data_frame &lt;- tibble(variable1 = variable1) data_frame %&gt;% mutate(variable1 = if_else(variable1 == -99,NA,variable1)) ## # A tibble: 6 × 1 ## variable1 ## &lt;dbl&gt; ## 1 1 ## 2 2 ## 3 3 ## 4 NA ## 5 5 ## 6 6 Let’s try to put that in a function. The function will need to take a data frame and a variable name as its arguments. Results from one step in the pipe, are passed as the first argument for the next step. So make sure the data is the first argument! clean_missing_df &lt;- function(input_dataframe, variablename){ input_dataframe %&gt;% mutate(variablename = if_else(variablename == -99,NA, variablename)) } data_frame %&gt;% clean_missing_df(variable1) ## # A tibble: 6 × 2 ## variable1 variablename ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 ## 2 2 2 ## 3 3 3 ## 4 -99 NA ## 5 5 5 ## 6 6 6 Wait, something went wrong! R just created a new variable called “variablename”. For a technical note on why this is, see here. In short, we want R too look what’s in variablename, not just use it as is. To do so, wrap the variable name in your function definition in {{ and }}, and change the = in mutatate to :=. clean_missing_df &lt;- function(input_dataframe, variablename){ input_dataframe %&gt;% mutate({{ variablename }} := if_else({{ variablename }} == -99, NA, {{ variablename }})) } data_frame %&gt;% clean_missing_df(variable1) ## # A tibble: 6 × 1 ## variable1 ## &lt;dbl&gt; ## 1 1 ## 2 2 ## 3 3 ## 4 NA ## 5 5 ## 6 6 Example 1: Re-using plot specifications If you’re writing a report that includes the same type of plot in many places, it makes sense to make it into a function. Let’s take the stacked bar plot from the plotting chapter: library(ggthemewur) stacked_bar_plot &lt;- function(df, by, fill) { # outputs a stacked bar chart df %&gt;% mutate( {{ by }} := count_label( {{ by }})) %&gt;% ggplot(aes(y = {{ by }}, fill = {{ fill }})) + geom_bar(position = position_fill(reverse = TRUE)) + labs(x= &quot;&quot;) + theme_wur() + scale_fill_wur_discrete() + geom_text(stat = &quot;count&quot;, aes(label = after_stat(count)), position = position_fill(vjust = 0.5, reverse = TRUE), color = &quot;white&quot;) + scale_x_continuous(labels = scales::percent_format()) + theme(legend.position=&quot;bottom&quot;) + guides(fill = guide_legend(nrow = 1, title.position=&quot;top&quot;, title.hjust = 0.5)) } count_label &lt;- function(vector) { # takes a vector of strings or factor, # output a factor vector with N = N included in the labels fct_recode(factor(vector), !!!vector %&gt;% as_tibble() %&gt;% group_by(value) %&gt;% summarize(n = n()) %&gt;% mutate(value = as.character(value), newlabel = paste0(value,&quot;\\nn=&quot;,n)) %&gt;% pull(value, name = newlabel)) } read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% stacked_bar_plot(village,respondent_wall_type) read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% stacked_bar_plot(village,affect_conflicts) Note that the count_label() function adds group counts to factor variable labels. This is useful for the by variable. I am not sure if I understand what the !!! operator means, but it works. The function basically creates a named vector, where the vector values are the old factor labels, and the vector names are new factor labels. The new labels include the N, which is computed using a standard group_by() %&gt;% summarize() pipeline. Example 2: Function to create dummies from text Remember our code to generate dummies based on text: read_csv(&quot;data/SAFI_clean.csv&quot;, na = &quot;NULL&quot;) %&gt;% mutate(items_owned = ifelse(is.na(items_owned),&quot;None&quot;,items_owned)) %&gt;% select(key_ID,items_owned) %&gt;% separate_longer_delim(items_owned, delim = &quot;;&quot;) %&gt;% mutate(value = 1) %&gt;% pivot_wider(names_from = items_owned, values_from = value, names_prefix = &quot;owns_&quot;, values_fill = 0) ## Rows: 131 Columns: 14 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (7): village, respondent_wall_type, memb_assoc, affect_conflicts, items... ## dbl (6): key_ID, no_membrs, years_liv, rooms, liv_count, no_meals ## dttm (1): interview_date ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## # A tibble: 131 × 19 ## key_ID owns_bicycle owns_television owns_solar_panel owns_table owns_cow_cart ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 1 1 1 0 ## 2 2 1 0 1 1 1 ## 3 3 0 0 0 0 0 ## 4 4 1 0 1 0 0 ## 5 5 0 0 0 0 0 ## 6 6 0 0 0 0 0 ## 7 7 0 0 0 0 0 ## 8 8 1 1 1 1 0 ## 9 9 0 1 1 0 0 ## 10 10 1 1 1 1 1 ## # ℹ 121 more rows ## # ℹ 13 more variables: owns_radio &lt;dbl&gt;, owns_cow_plough &lt;dbl&gt;, ## # owns_solar_torch &lt;dbl&gt;, owns_mobile_phone &lt;dbl&gt;, owns_motorcyle &lt;dbl&gt;, ## # owns_None &lt;dbl&gt;, owns_fridge &lt;dbl&gt;, owns_electricity &lt;dbl&gt;, ## # owns_sofa_set &lt;dbl&gt;, owns_lorry &lt;dbl&gt;, owns_sterio &lt;dbl&gt;, ## # owns_computer &lt;dbl&gt;, owns_car &lt;dbl&gt; I now want to apply this same principle to months_lack_food column. I could copy-paste the code, but the better solution is to make a function: create_dummies &lt;- function(df,stringvar,prefix=&quot;&quot;,delim = &quot;;&quot;) { #Function that generates dummies from a string variable #containing multi-response answers #returns dataset without original var, but with dummies. df %&gt;% separate_longer_delim({{ stringvar }}, delim = delim) %&gt;% mutate(value = 1) %&gt;% pivot_wider(names_from = {{stringvar}}, values_from = value, names_prefix = prefix, values_fill = 0) } read_csv(here(&quot;data/SAFI_clean.csv&quot;), na = &quot;NULL&quot;) %&gt;% mutate(items_owned = ifelse(is.na(items_owned),&quot;None&quot;,items_owned)) %&gt;% create_dummies(stringvar = items_owned, prefix = &quot;owns_&quot;) %&gt;% create_dummies(months_lack_food,&quot;lack_food_&quot;) ## Rows: 131 Columns: 14 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (7): village, respondent_wall_type, memb_assoc, affect_conflicts, items... ## dbl (6): key_ID, no_membrs, years_liv, rooms, liv_count, no_meals ## dttm (1): interview_date ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## # A tibble: 131 × 43 ## key_ID village interview_date no_membrs years_liv respondent_wall_type ## &lt;dbl&gt; &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 1 God 2016-11-17 00:00:00 3 4 muddaub ## 2 2 God 2016-11-17 00:00:00 7 9 muddaub ## 3 3 God 2016-11-17 00:00:00 10 15 burntbricks ## 4 4 God 2016-11-17 00:00:00 7 6 burntbricks ## 5 5 God 2016-11-17 00:00:00 7 40 burntbricks ## 6 6 God 2016-11-17 00:00:00 3 3 muddaub ## 7 7 God 2016-11-17 00:00:00 6 38 muddaub ## 8 8 Chirodzo 2016-11-16 00:00:00 12 70 burntbricks ## 9 9 Chirodzo 2016-11-16 00:00:00 8 6 burntbricks ## 10 10 Chirodzo 2016-12-16 00:00:00 12 23 burntbricks ## # ℹ 121 more rows ## # ℹ 37 more variables: rooms &lt;dbl&gt;, memb_assoc &lt;chr&gt;, affect_conflicts &lt;chr&gt;, ## # liv_count &lt;dbl&gt;, no_meals &lt;dbl&gt;, instanceID &lt;chr&gt;, owns_bicycle &lt;dbl&gt;, ## # owns_television &lt;dbl&gt;, owns_solar_panel &lt;dbl&gt;, owns_table &lt;dbl&gt;, ## # owns_cow_cart &lt;dbl&gt;, owns_radio &lt;dbl&gt;, owns_cow_plough &lt;dbl&gt;, ## # owns_solar_torch &lt;dbl&gt;, owns_mobile_phone &lt;dbl&gt;, owns_motorcyle &lt;dbl&gt;, ## # owns_None &lt;dbl&gt;, owns_fridge &lt;dbl&gt;, owns_electricity &lt;dbl&gt;, … The code is now clear, I can update the function in one place and all variables will be updated accordingly. Plus, if I want to use the same code in another project, I can easily do it. Map() map() works just like loop, but generally faster. It takes two arguments: An iterable object, like a vector or list A function It will then apply the function to each element of the object. It will return a list with the results of each iteration. For example, to get the the square root for each of the numbers in a vector: vector &lt;- c(4,9,16) map(vector,sqrt) ## [[1]] ## [1] 2 ## ## [[2]] ## [1] 3 ## ## [[3]] ## [1] 4 You may not quite like the fact that map returns a list, but quite a few things in R use lists. modelsummary() for example. Suppose I want to regress the same y on a number of combinations of independent variables, I can put the combination of varaibles in a list, and then run my model for each element of the list. I use reformulate() to convert strings into a formula ‘lm()’ can use. Also, I use ~ to create a purrr-style inline anonymous function within map(). library(modelsummary) # generate some sample data df &lt;- tibble(y = rnorm(50),x1 = rnorm(50),x2 = rnorm(50)) # define a list of models: # the left-hand sides are the labels # the right-hand sides the independent variables I will pass to reformulate. models &lt;- list(&quot;X1 only&quot; = &quot;x1&quot;, &quot;X2 only&quot; = &quot;x2&quot;, &quot;Both&quot; = c(&quot;x1&quot;,&quot;x2&quot;)) # map() works nicely in dplyr pipe! # the ~ creates a purrr-style anonymous function, where .x is current element of the list models %&gt;% map(~lm(reformulate(.x, response=&quot;y&quot;),data = df)) %&gt;% modelsummary(output = &quot;flextable&quot;) .cl-9748645e{}.cl-9741c20c{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-974531b2{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-974542ec{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-974542ed{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-974542f6{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-97454300{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} X1 onlyX2 onlyBoth(Intercept)0.1370.0900.136(0.143)(0.143)(0.145)x1-0.218-0.218(0.142)(0.144)x2-0.012-0.004(0.153)(0.151)Num.Obs.505050R20.0470.0000.047R2 Adj.0.027-0.0210.006AIC144.5146.9146.5BIC150.3152.7154.2Log.Lik.-69.274-70.465-69.273F2.3490.0071.150RMSE0.970.990.97 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
